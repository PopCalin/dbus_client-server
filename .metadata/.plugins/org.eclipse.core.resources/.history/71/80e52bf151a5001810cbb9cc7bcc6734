#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dbus/dbus.h>
#include <dbus/dbus-glib-lowlevel.h> /* for glib main loop */

const char *introspection_xml =
		"/<node>\n"
		"  <interface name='org.freedesktop.DBus.Introspectable'>\n"
		"    <method name='Introspect'>\n"
		"      <arg name='data' type='s' direction='out' />\n"
		"    </method>\n"
		"  </interface>\n"

		"  <interface name='org.freedesktop.DBus.Properties'>\n"
		"    <method name='Get'>\n"
		"      <arg name='interface' type='s' direction='in' />\n"
		"      <arg name='property'  type='s' direction='in' />\n"
		"      <arg name='value'     type='s' direction='out' />\n"
		"    </method>\n"
		"    <method name='GetAll'>\n"
		"      <arg name='interface'  type='s'     direction='in'/>\n"
		"      <arg name='properties' type='a{sv}' direction='out'/>\n"
		"    </method>\n"
		"  </interface>\n"

		"  <interface name='org.example.TestInterface'>\n"
		"    <method name='Echo'>\n"
		"      <arg name='EchoString' direction='in' type='s'/>\n"
		"      <arg type='s' direction='out' />\n"
		"    </method>\n"
		"	<method name='Ping' >\n"
		"		<arg type='s' direction='out' />\n"
		"	</method>\n"
		"    <signal name='OnEmitSignal'>\n"
		"    </signal>"
		"  </interface>\n"
		"</node>\n";

typedef enum
{
	CONNECTION_FAILED = 0,
	CONNECTION_SUCCEEDED = 1,
}CONNECTION_STATUS;

typedef enum
{
	REGISTER_REQUEST_FAILED = 0,
	REGISTER_REQUEST_SUCCEEDED =1
}REGISTER_REQUEST_STATUS;

typedef enum
{
	CONNECTION_FAILURE = -1,
	REQUEST_NAME_FAILURE = -2,
	REGISTER_REQUEST_FAILURE = -3,
	SERVER_SUCCEEDED = 1
}EXIT_STATUS;

GMainLoop *mainloop;
const char *version = "0.1";

DBusHandlerResult server_get_properties_handler(const char *property, DBusConnection *conn, DBusMessage *reply)
{
	if (!strcmp(property, "Version")) {
		dbus_message_append_args(reply,
					 DBUS_TYPE_STRING, &version,
					 DBUS_TYPE_INVALID);
	} else
		/* Unknown property */
		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;

	if (!dbus_connection_send(conn, reply, NULL))
		return DBUS_HANDLER_RESULT_NEED_MEMORY;
	return DBUS_HANDLER_RESULT_HANDLED;
}

/*
 * This implements 'GetAll' method of DBUS_INTERFACE_PROPERTIES. This
 * one seems required by g_dbus_proxy_get_cached_property().
 */
DBusHandlerResult server_get_all_properties_handler(DBusConnection *conn, DBusMessage *reply)
{
	DBusHandlerResult result;
	DBusMessageIter array, dict, iter, variant;
	const char *property = "Version";

	/*
	 * All dbus functions used below might fail due to out of
	 * memory error. If one of them fails, we assume that all
	 * following functions will fail too, including
	 * dbus_connection_send().
	 */
	result = DBUS_HANDLER_RESULT_NEED_MEMORY;

	dbus_message_iter_init_append(reply, &iter);
	dbus_message_iter_open_container(&iter, DBUS_TYPE_ARRAY, "{sv}", &array);

	/* Append all properties name/value pairs */
	property = "Version";
	dbus_message_iter_open_container(&array, DBUS_TYPE_DICT_ENTRY, NULL, &dict);
	dbus_message_iter_append_basic(&dict, DBUS_TYPE_STRING, &property);
	dbus_message_iter_open_container(&dict, DBUS_TYPE_VARIANT, "s", &variant);
	dbus_message_iter_append_basic(&variant, DBUS_TYPE_STRING, &version);
	dbus_message_iter_close_container(&dict, &variant);
	dbus_message_iter_close_container(&array, &dict);

	dbus_message_iter_close_container(&iter, &array);

	if (dbus_connection_send(conn, reply, NULL))
		result = DBUS_HANDLER_RESULT_HANDLED;
	return result;
}

DBusHandlerResult server_message_handler(DBusConnection *conn, DBusMessage *message, void *data)
{
	DBusHandlerResult result;
        DBusMessage *reply = NULL;
	DBusError err;
	//bool quit = false;

	fprintf(stderr, "Got D-Bus request: %s.%s on %s\n",
		dbus_message_get_interface(message),
		dbus_message_get_member(message),
		dbus_message_get_path(message));

	/*
	 * Does not allocate any memory; the error only needs to be
	 * freed if it is set at some point.
	 */
	dbus_error_init(&err);

	if (dbus_message_is_method_call(message, DBUS_INTERFACE_INTROSPECTABLE, "Introspect")) {

		if (!(reply = dbus_message_new_method_return(message)))
			goto fail;

		dbus_message_append_args(reply,
					 DBUS_TYPE_STRING, &introspection_xml,
					 DBUS_TYPE_INVALID);

	}  else if (dbus_message_is_method_call(message, DBUS_INTERFACE_PROPERTIES, "Get")) {
		const char *interface, *property;

		if (!dbus_message_get_args(message, &err,
					   DBUS_TYPE_STRING, &interface,
					   DBUS_TYPE_STRING, &property,
					   DBUS_TYPE_INVALID))
			goto fail;

		if (!(reply = dbus_message_new_method_return(message)))
			goto fail;

		result = server_get_properties_handler(property, conn, reply);
		dbus_message_unref(reply);
		return result;

	}  else if (dbus_message_is_method_call(message, DBUS_INTERFACE_PROPERTIES, "GetAll")) {

		if (!(reply = dbus_message_new_method_return(message)))
			goto fail;

		result = server_get_all_properties_handler(conn, reply);
		dbus_message_unref(reply);
		return result;

	} else if (dbus_message_is_method_call(message, "org.example.TestInterface", "Echo")) {
		const char *msg;

		if (!dbus_message_get_args(message, &err,
					   DBUS_TYPE_STRING, &msg,
					   DBUS_TYPE_INVALID))
			goto fail;

		if (!(reply = dbus_message_new_method_return(message)))
			goto fail;

		dbus_message_append_args(reply,
					 DBUS_TYPE_STRING, &msg,
					 DBUS_TYPE_INVALID);
	}  else if (dbus_message_is_method_call(message, "org.example.TestInterface", "Ping")) {
		const char *pong = "Pong";

		if (!(reply = dbus_message_new_method_return(message)))
			goto fail;

		dbus_message_append_args(reply,
					 DBUS_TYPE_STRING, &pong,
					 DBUS_TYPE_INVALID);

	} else if (dbus_message_is_method_call(message, "org.example.TestInterface", "EmitSignal")) {

		if (!(reply = dbus_message_new_signal("/org/example/TestObject",
						      "org.example.TestInterface",
						      "OnEmitSignal")))
			goto fail;

		if (!dbus_connection_send(conn, reply, NULL))
			return DBUS_HANDLER_RESULT_NEED_MEMORY;

		/* Send a METHOD_RETURN reply. */
		reply = dbus_message_new_method_return(message);

	} else
		return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;

fail:
	if (dbus_error_is_set(&err)) {
		if (reply)
			dbus_message_unref(reply);
		reply = dbus_message_new_error(message, err.name, err.message);
		dbus_error_free(&err);
	}

	/*
	 * In any cases we should have allocated a reply otherwise it
	 * means that we failed to allocate one.
	 */
	if (!reply)
		return DBUS_HANDLER_RESULT_NEED_MEMORY;

	/* Send the reply which might be an error one too. */
	result = DBUS_HANDLER_RESULT_HANDLED;
	if (!dbus_connection_send(conn, reply, NULL))
		result = DBUS_HANDLER_RESULT_NEED_MEMORY;
	dbus_message_unref(reply);

	return result;
}

const DBusObjectPathVTable server_vtable = {
	.message_function = server_message_handler
};

int main(void)
{
	/*
	 * Handles a connection to DBus.
	 * This is a Singleton class, only 1 connection to the SYSTEM or SESSION busses can be made. Repeated calls to getConnection will return the same reference.
	 * Signal Handlers and method calls from remote objects are run in their own threads, you MUST handle the concurrency issues.
	 */
	DBusConnection *connection;

	/* Contains standard errors that can be thrown from methods. */
	DBusError error;

	dbus_error_init(&error);

	/* Connects to a bus daemon and registers the client with it
	 * If a connection to the bus already exists, then that connection is returned. The caller of this function owns a reference to the bus.
	 * If returning a newly-created connection, this function will block until authentication and bus registration are complete.
	 */
	connection = dbus_bus_get(DBUS_BUS_SYSTEM, &error);

	if (connection !NULL)
	{
		fprintf(stderr, "Failed to get a SYSTEM DBus connection: %s\n", error.message);
		dbus_error_free(&error);

		return CONNECTION_FAILURE;
	}


/*	<!DOCTYPE busconfig PUBLIC
	 "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
	 "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">

	<busconfig>
	    <policy user="myUser">
	        <allow own="org.example.TestServer"/>
	        <allow send_destination="org.example.TestServer"
	    </policy>
	    <policy user="root">
	        <allow own="*"/>
	        <allow own="org.example.TestServer"/>
	        <allow send_type="method_call" log="true"/>
	    </policy>
	    <policy context="default">
	    <allow send_destination="org.example.TestServer" send_interface="org.freedesktop.DBus.Properties"/>
	    <allow send_destination="org.example.TestServer" send_interface="org.freedesktop.DBus.Introspectable"/>
	    </policy>
	</busconfig> */

	/*
	 * Asks the bus to assign the given name to this connection by invoking the RequestName method on the bus.
	 * First you should know that for each bus name, the bus stores a queue of connections that would like to own it. Only one owns it at a time - called the primary owner. If the primary owner releases the name or disconnects, then the next owner in the queue atomically takes over.
	 * So for example if you have an application org.freedesktop.TextEditor and multiple instances of it can be run, you can have all of them sitting in the queue.
	 * The first one to start up will receive messages sent to org.freedesktop.TextEditor, but if that one exits another will become the primary owner and receive messages.
	 * The queue means you don't need to manually watch for the current owner to disappear and then request the name again.
	 */
	unsigned char dbus_name_request_response = dbus_bus_request_name(connection, "org.example.TestServer", DBUS_NAME_FLAG_ALLOW_REPLACEMENT , &error);

/*	if ( (dbus_name_request_response == DBUS_REQUEST_NAME_REPLY_IN_QUEUE 	 ) ||
		 (dbus_name_request_response == DBUS_REQUEST_NAME_REPLY_EXISTS    	 ) ||
		 (dbus_name_request_response == DBUS_REQUEST_NAME_REPLY_ALREADY_OWNER ))*/

	if (dbus_name_request_response != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER)
	{
		fprintf(stderr, "Failed to request name on bus: %s\n", error.message);
		return REQUEST_NAME_FAILURE;
	}

	/*
	 * Registers a handler for a given path in the object hierarchy.
	 * The given vtable handles messages sent to exactly the given path.
	 * DBusObjectPathVTable - Virtual table that must be implemented to handle a portion of the object path hierarchy. Attach the vtable to a particular path using dbus_connection_register_object_path().
	 */
	//unsigned char dbus_register_request_response =  dbus_connection_register_object_path(connection, "/org/example/TestObject", &server_vtable, NULL);

	//if (dbus_register_request_response == REGISTER_REQUEST_SUCCEEDED)
	if (!dbus_connection_register_object_path(connection, "/org/example/TestObject", &server_vtable, NULL))
	{
		fprintf(stderr, "Failed to register a object path for 'TestObject'\n");
		return REGISTER_REQUEST_FAILURE;

	}

	printf("Starting dbus server\n");

	mainloop = g_main_loop_new(NULL, false);
	dbus_connection_setup_with_g_main(connection, NULL);
	g_main_loop_run(mainloop);

	return SERVER_SUCCEEDED;

}
