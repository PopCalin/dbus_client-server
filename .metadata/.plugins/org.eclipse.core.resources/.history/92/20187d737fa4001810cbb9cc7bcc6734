#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dbus/dbus.h>
#include <dbus/dbus-glib-lowlevel.h> /* for glib main loop */

const char *introspection_xml =
		"<node>\n"
		"  <interface name='org.freedesktop.DBus.Introspectable'>\n"
		"    <method name='Introspect'>\n"
		"      <arg name='data' type='s' direction='out' />\n"
		"    </method>\n"
		"  </interface>\n"

		"  <interface name='org.freedesktop.DBus.Properties'>\n"
		"    <method name='Get'>\n"
		"      <arg name='interface' type='s' direction='in' />\n"
		"      <arg name='property'  type='s' direction='in' />\n"
		"      <arg name='value'     type='s' direction='out' />\n"
		"    </method>\n"
		"    <method name='GetAll'>\n"
		"      <arg name='interface'  type='s'     direction='in'/>\n"
		"      <arg name='properties' type='a{sv}' direction='out'/>\n"
		"    </method>\n"
		"  </interface>\n"

		"  <interface name='org.example.TestInterface'>\n"
		"    <method name='Echo'>\n"
		"      <arg name='EchoString' direction='in' type='s'/>\n"
		"      <arg type='s' direction='out' />\n"
		"    </method>\n"
		"    <signal name='OnEmitSignal'>\n"
		"    </signal>"
		"  </interface>\n"
		"</node>\n";

int main(void)
{
	/*
	 * Handles a connection to DBus.
	 * This is a Singleton class, only 1 connection to the SYSTEM or SESSION busses can be made. Repeated calls to getConnection will return the same reference.
	 * Signal Handlers and method calls from remote objects are run in their own threads, you MUST handle the concurrency issues.
	 */
	DBusConnection *connection;

	/* Contains standard errors that can be thrown from methods. */
	DBusError error;

	dbus_error_init(&error);

	/* Connects to a bus daemon and registers the client with it
	 * If a connection to the bus already exists, then that connection is returned. The caller of this function owns a reference to the bus.
	 *//
	connection = dbus_bus_get(DBUS_BUS_SYSTEM, &error);
}
