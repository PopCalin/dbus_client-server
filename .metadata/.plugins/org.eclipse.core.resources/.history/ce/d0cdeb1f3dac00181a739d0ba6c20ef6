#include <stdbool.h>
#include <stdio.h>
#include <glib/gprintf.h>
#include <gio/gio.h>
#ifndef TRUE
#  define TRUE 1
#endif
#ifndef FALSE
#  define FALSE 0
#endif

void getAlarmStatus(GDBusProxy *proxy)
{
	GVariant *result;
	GError *error = NULL;
	const gchar *str;

	g_printf("Calling getAlarmStatus\n");
	result = g_dbus_proxy_call_sync(proxy,"getAlarmStatus",NULL,G_DBUS_CALL_FLAGS_NONE,-1,NULL,&error);

	g_assert_no_error(error);
	g_variant_get(result, "(&s)", &str);
	g_printf("The server answered: '%s'\n", str);
	g_variant_unref(result);
}

void setAlarmStatus(GDBusProxy *proxy)
{
	GVariant *result;
	GError *error = NULL;

	g_printf("Calling setAlarmStatus\n");result = g_dbus_proxy_call_sync(proxy,"setAlarmStatus",g_variant_new ("(s)", "Alarm ON"),G_DBUS_CALL_FLAGS_NONE,-1,NULL,&error);
	g_assert_no_error(error);
	g_variant_unref(result);
}

void setAlarmTime(GDBusProxy *proxy)
{
	GVariant *result;
	GError *error = NULL;

	g_printf("Calling setAlarmTime\n");result = g_dbus_proxy_call_sync(proxy,"setAlarmTime",g_variant_new ("(yyyy)",13,15,15,8),G_DBUS_CALL_FLAGS_NONE,-1,NULL,&error);
	g_assert_no_error(error);
	g_variant_unref(result);
}

void setTime(GDBusProxy *proxy)
{
	GVariant *result;
	GError *error = NULL;

	g_printf("Calling setTime\n");
	result = g_dbus_proxy_call_sync(proxy,"setTime",g_variant_new ("(yyqyyy)",30,8,2018,13,15,10),G_DBUS_CALL_FLAGS_NONE,-1,NULL,&error);
	g_assert_no_error(error);
	g_variant_unref(result);
}

void ringAlarm(GDBusConnection *conn,
			     const gchar *sender_name,
			     const gchar *object_path,
			     const gchar *interface_name,
			     const gchar *signal_name,
			     GVariant *parameters,
			     gpointer data)
{
	GMainLoop *loop = data;

	g_printf("signal handler: Ring Alarm received.\n");
	g_main_loop_quit(loop);
}

int main(void)
{

	GMainLoop *loop;
	GDBusProxy *proxy;
	GDBusConnection *conn;
	GError *error = NULL;

	conn = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, &error);
	g_assert_no_error(error);

	proxy = g_dbus_proxy_new_sync(conn,
				      G_DBUS_PROXY_FLAGS_NONE,
				      NULL,
				      "com.example.AlarmService",
				      "/com/example/AlarmService/manager/Object",
				      "com.example.AlarmService.AlarmInterface",
				      NULL,
				      &error);

	g_assert_no_error(error);

	loop = g_main_loop_new(NULL, false);


	g_dbus_connection_signal_subscribe(conn,"com.example.AlarmService","com.example.AlarmService.AlarmInterface","ringAlarm","/com/example/AlarmService/manager/Object",NULL,G_DBUS_SIGNAL_FLAGS_NONE,ringAlarm,loop,NULL);


	setAlarmStatus(proxy);
	setTime(proxy);
	setAlarmTime(proxy);

	g_main_loop_run (loop);


	g_object_unref(proxy);
	g_object_unref(conn);
	return 0;
}














/*

void on_emit_signal_callback(GDBusConnection *conn,
			     const gchar *sender_name,
			     const gchar *object_path,
			     const gchar *interface_name,
			     const gchar *signal_name,
			     GVariant *parameters,
			     gpointer data)
{
	GMainLoop *loop = data;

	g_printf("signal handler: OnEmitSignal received.\n");
	g_main_loop_quit(loop);
}


void test_EmitSignal(GDBusProxy *proxy)
{
	GMainLoop *loop;
	GError *error = NULL;
	guint id;  subscription id
	GDBusConnection *conn;

	loop = g_main_loop_new(NULL, false);
	conn = g_dbus_proxy_get_connection(proxy);

	id = g_dbus_connection_signal_subscribe(conn,
						"org.example.TestServer",
						"org.example.TestInterface",
						"OnEmitSignal",
						"/org/example/TestObject",
						NULL,  arg0
						G_DBUS_SIGNAL_FLAGS_NONE,
						on_emit_signal_callback,
						loop,  user data
						NULL);


	 * Make the server emit the signal. Normally no races can
	 * happen here since signal events are only processed once the
	 * loop is started so the callback can't be run before.

	g_printf("Calling method EmitSignal()...\n");
	g_dbus_proxy_call_sync(proxy,
			       "EmitSignal",
			       NULL,	 no arguments
			       G_DBUS_CALL_FLAGS_NONE,
			       -1,
			       NULL,
			       &error);
	g_assert_no_error(error);


	 * The only way to break the loop is to receive the signal and
	 * run the signal's callback.

	g_main_loop_run(loop);
	g_dbus_connection_signal_unsubscribe(conn, id);
	g_printf("The server emitted 'OnEmitSignal'\n");
}

*/


