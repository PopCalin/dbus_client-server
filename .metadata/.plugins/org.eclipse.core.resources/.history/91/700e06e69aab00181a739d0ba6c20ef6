/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ALARMCLOCKSERVICESTUBS_H__
#define __ALARMCLOCKSERVICESTUBS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (alarm_clock_service_org_freedesktop_dbus_introspectable_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarmClockServiceOrgFreedesktopDBusIntrospectable))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarmClockServiceOrgFreedesktopDBusIntrospectableIface))

struct _alarmClockServiceOrgFreedesktopDBusIntrospectable;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectable alarmClockServiceOrgFreedesktopDBusIntrospectable;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableIface alarmClockServiceOrgFreedesktopDBusIntrospectableIface;

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType alarm_clock_service_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info (void);
guint alarm_clock_service_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_clock_service_org_freedesktop_dbus_introspectable_complete_introspect (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);



/* D-Bus method calls: */
void alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_finish (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_sync (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmClockServiceOrgFreedesktopDBusIntrospectableProxy))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxy alarmClockServiceOrgFreedesktopDBusIntrospectableProxy;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (alarm_clock_service_org_freedesktop_dbus_properties_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarmClockServiceOrgFreedesktopDBusProperties))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarmClockServiceOrgFreedesktopDBusPropertiesIface))

struct _alarmClockServiceOrgFreedesktopDBusProperties;
typedef struct _alarmClockServiceOrgFreedesktopDBusProperties alarmClockServiceOrgFreedesktopDBusProperties;
typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesIface alarmClockServiceOrgFreedesktopDBusPropertiesIface;

struct _alarmClockServiceOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_property);

  gboolean (*handle_get_all) (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

};

GType alarm_clock_service_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_clock_service_org_freedesktop_dbus_properties_interface_info (void);
guint alarm_clock_service_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_clock_service_org_freedesktop_dbus_properties_complete_get (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void alarm_clock_service_org_freedesktop_dbus_properties_complete_get_all (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus method calls: */
void alarm_clock_service_org_freedesktop_dbus_properties_call_get (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_org_freedesktop_dbus_properties_call_get_finish (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_org_freedesktop_dbus_properties_call_get_sync (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_service_org_freedesktop_dbus_properties_call_get_all (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_finish (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_sync (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (alarm_clock_service_org_freedesktop_dbus_properties_proxy_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmClockServiceOrgFreedesktopDBusPropertiesProxy))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxy alarmClockServiceOrgFreedesktopDBusPropertiesProxy;
typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate;

struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_clock_service_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void alarm_clock_service_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (alarm_clock_service_org_freedesktop_dbus_properties_skeleton_get_type ())
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass))
#define ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_clock_service_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.example.AlarmService.AlarmInterface */

#define ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE (alarm_clock_service_alarm_interface_get_type ())
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarmClockServiceAlarmInterface))
#define ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE))
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarmClockServiceAlarmInterfaceIface))

struct _alarmClockServiceAlarmInterface;
typedef struct _alarmClockServiceAlarmInterface alarmClockServiceAlarmInterface;
typedef struct _alarmClockServiceAlarmInterfaceIface alarmClockServiceAlarmInterfaceIface;

struct _alarmClockServiceAlarmInterfaceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_alarm_status) (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_alarm_status) (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_alarm_status);

  gboolean (*handle_set_alarm_time) (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    guchar arg_week_day);

  gboolean (*handle_set_time) (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec);

  void (*ring_alarm) (
    alarmClockServiceAlarmInterface *object);

};

GType alarm_clock_service_alarm_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_clock_service_alarm_interface_interface_info (void);
guint alarm_clock_service_alarm_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_clock_service_alarm_interface_complete_set_time (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *return_message);

void alarm_clock_service_alarm_interface_complete_set_alarm_time (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *return_message);

void alarm_clock_service_alarm_interface_complete_set_alarm_status (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *return_message);

void alarm_clock_service_alarm_interface_complete_get_alarm_status (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *alarm_status);



/* D-Bus signal emissions functions: */
void alarm_clock_service_alarm_interface_emit_ring_alarm (
    alarmClockServiceAlarmInterface *object);



/* D-Bus method calls: */
void alarm_clock_service_alarm_interface_call_set_time (
    alarmClockServiceAlarmInterface *proxy,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_alarm_interface_call_set_time_finish (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_return_message,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_alarm_interface_call_set_time_sync (
    alarmClockServiceAlarmInterface *proxy,
    guchar arg_day,
    guchar arg_month,
    guint16 arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    gchar **out_return_message,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_service_alarm_interface_call_set_alarm_time (
    alarmClockServiceAlarmInterface *proxy,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    guchar arg_week_day,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_alarm_interface_call_set_alarm_time_finish (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_return_message,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_alarm_interface_call_set_alarm_time_sync (
    alarmClockServiceAlarmInterface *proxy,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    guchar arg_week_day,
    gchar **out_return_message,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_service_alarm_interface_call_set_alarm_status (
    alarmClockServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_alarm_interface_call_set_alarm_status_finish (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_return_message,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_alarm_interface_call_set_alarm_status_sync (
    alarmClockServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    gchar **out_return_message,
    GCancellable *cancellable,
    GError **error);

void alarm_clock_service_alarm_interface_call_get_alarm_status (
    alarmClockServiceAlarmInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_clock_service_alarm_interface_call_get_alarm_status_finish (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GAsyncResult *res,
    GError **error);

gboolean alarm_clock_service_alarm_interface_call_get_alarm_status_sync (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY (alarm_clock_service_alarm_interface_proxy_get_type ())
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmClockServiceAlarmInterfaceProxy))
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmClockServiceAlarmInterfaceProxyClass))
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmClockServiceAlarmInterfaceProxyClass))
#define ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY))
#define ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY))

typedef struct _alarmClockServiceAlarmInterfaceProxy alarmClockServiceAlarmInterfaceProxy;
typedef struct _alarmClockServiceAlarmInterfaceProxyClass alarmClockServiceAlarmInterfaceProxyClass;
typedef struct _alarmClockServiceAlarmInterfaceProxyPrivate alarmClockServiceAlarmInterfaceProxyPrivate;

struct _alarmClockServiceAlarmInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmClockServiceAlarmInterfaceProxyPrivate *priv;
};

struct _alarmClockServiceAlarmInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_clock_service_alarm_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceAlarmInterfaceProxy, g_object_unref)
#endif

void alarm_clock_service_alarm_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceAlarmInterface *alarm_clock_service_alarm_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceAlarmInterface *alarm_clock_service_alarm_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_clock_service_alarm_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmClockServiceAlarmInterface *alarm_clock_service_alarm_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmClockServiceAlarmInterface *alarm_clock_service_alarm_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON (alarm_clock_service_alarm_interface_skeleton_get_type ())
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmClockServiceAlarmInterfaceSkeleton))
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmClockServiceAlarmInterfaceSkeletonClass))
#define ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmClockServiceAlarmInterfaceSkeletonClass))
#define ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON))
#define ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON))

typedef struct _alarmClockServiceAlarmInterfaceSkeleton alarmClockServiceAlarmInterfaceSkeleton;
typedef struct _alarmClockServiceAlarmInterfaceSkeletonClass alarmClockServiceAlarmInterfaceSkeletonClass;
typedef struct _alarmClockServiceAlarmInterfaceSkeletonPrivate alarmClockServiceAlarmInterfaceSkeletonPrivate;

struct _alarmClockServiceAlarmInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmClockServiceAlarmInterfaceSkeletonPrivate *priv;
};

struct _alarmClockServiceAlarmInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_clock_service_alarm_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceAlarmInterfaceSkeleton, g_object_unref)
#endif

alarmClockServiceAlarmInterface *alarm_clock_service_alarm_interface_skeleton_new (void);


/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_OBJECT (alarm_clock_service_object_get_type ())
#define ALARM_CLOCK_SERVICE_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT, alarmClockServiceObject))
#define ALARM_CLOCK_SERVICE_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT))
#define ALARM_CLOCK_SERVICE_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT, alarmClockServiceObject))

struct _alarmClockServiceObject;
typedef struct _alarmClockServiceObject alarmClockServiceObject;
typedef struct _alarmClockServiceObjectIface alarmClockServiceObjectIface;

struct _alarmClockServiceObjectIface
{
  GTypeInterface parent_iface;
};

GType alarm_clock_service_object_get_type (void) G_GNUC_CONST;

alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_object_get_org_freedesktop_dbus_introspectable (alarmClockServiceObject *object);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_object_get_org_freedesktop_dbus_properties (alarmClockServiceObject *object);
alarmClockServiceAlarmInterface *alarm_clock_service_object_get_alarm_interface (alarmClockServiceObject *object);
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_object_peek_org_freedesktop_dbus_introspectable (alarmClockServiceObject *object);
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_object_peek_org_freedesktop_dbus_properties (alarmClockServiceObject *object);
alarmClockServiceAlarmInterface *alarm_clock_service_object_peek_alarm_interface (alarmClockServiceObject *object);

#define ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY (alarm_clock_service_object_proxy_get_type ())
#define ALARM_CLOCK_SERVICE_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY, alarmClockServiceObjectProxy))
#define ALARM_CLOCK_SERVICE_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY, alarmClockServiceObjectProxyClass))
#define ALARM_CLOCK_SERVICE_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY, alarmClockServiceObjectProxyClass))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY))

typedef struct _alarmClockServiceObjectProxy alarmClockServiceObjectProxy;
typedef struct _alarmClockServiceObjectProxyClass alarmClockServiceObjectProxyClass;
typedef struct _alarmClockServiceObjectProxyPrivate alarmClockServiceObjectProxyPrivate;

struct _alarmClockServiceObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  alarmClockServiceObjectProxyPrivate *priv;
};

struct _alarmClockServiceObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType alarm_clock_service_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceObjectProxy, g_object_unref)
#endif

alarmClockServiceObjectProxy *alarm_clock_service_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON (alarm_clock_service_object_skeleton_get_type ())
#define ALARM_CLOCK_SERVICE_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON, alarmClockServiceObjectSkeleton))
#define ALARM_CLOCK_SERVICE_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON, alarmClockServiceObjectSkeletonClass))
#define ALARM_CLOCK_SERVICE_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON, alarmClockServiceObjectSkeletonClass))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON))

typedef struct _alarmClockServiceObjectSkeleton alarmClockServiceObjectSkeleton;
typedef struct _alarmClockServiceObjectSkeletonClass alarmClockServiceObjectSkeletonClass;
typedef struct _alarmClockServiceObjectSkeletonPrivate alarmClockServiceObjectSkeletonPrivate;

struct _alarmClockServiceObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  alarmClockServiceObjectSkeletonPrivate *priv;
};

struct _alarmClockServiceObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType alarm_clock_service_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceObjectSkeleton, g_object_unref)
#endif

alarmClockServiceObjectSkeleton *alarm_clock_service_object_skeleton_new (const gchar *object_path);
void alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_introspectable (alarmClockServiceObjectSkeleton *object, alarmClockServiceOrgFreedesktopDBusIntrospectable *interface_);
void alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_properties (alarmClockServiceObjectSkeleton *object, alarmClockServiceOrgFreedesktopDBusProperties *interface_);
void alarm_clock_service_object_skeleton_set_alarm_interface (alarmClockServiceObjectSkeleton *object, alarmClockServiceAlarmInterface *interface_);

/* ---- */

#define ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT (alarm_clock_service_object_manager_client_get_type ())
#define ALARM_CLOCK_SERVICE_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmClockServiceObjectManagerClient))
#define ALARM_CLOCK_SERVICE_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmClockServiceObjectManagerClientClass))
#define ALARM_CLOCK_SERVICE_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmClockServiceObjectManagerClientClass))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT))
#define ALARM_CLOCK_SERVICE_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _alarmClockServiceObjectManagerClient alarmClockServiceObjectManagerClient;
typedef struct _alarmClockServiceObjectManagerClientClass alarmClockServiceObjectManagerClientClass;
typedef struct _alarmClockServiceObjectManagerClientPrivate alarmClockServiceObjectManagerClientPrivate;

struct _alarmClockServiceObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  alarmClockServiceObjectManagerClientPrivate *priv;
};

struct _alarmClockServiceObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmClockServiceObjectManagerClient, g_object_unref)
#endif

GType alarm_clock_service_object_manager_client_get_type (void) G_GNUC_CONST;

GType alarm_clock_service_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void alarm_clock_service_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_clock_service_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_clock_service_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void alarm_clock_service_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_clock_service_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_clock_service_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __ALARMCLOCKSERVICESTUBS_H__ */
