/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include <dbus//dbus-macros.h>
#include "../include/alarmClockServiceStubs.h"

#include <string.h>
#ifdef G_OS_UNIX
#  include <gio/gunixfdlist.h>
#endif

typedef struct
{
  GDBusArgInfo parent_struct;
  gboolean use_gvariant;
} _ExtendedGDBusArgInfo;

typedef struct
{
  GDBusMethodInfo parent_struct;
  const gchar *signal_name;
  gboolean pass_fdlist;
} _ExtendedGDBusMethodInfo;

typedef struct
{
  GDBusSignalInfo parent_struct;
  const gchar *signal_name;
} _ExtendedGDBusSignalInfo;

typedef struct
{
  GDBusPropertyInfo parent_struct;
  const gchar *hyphen_name;
  gboolean use_gvariant;
} _ExtendedGDBusPropertyInfo;

typedef struct
{
  GDBusInterfaceInfo parent_struct;
  const gchar *hyphen_name;
} _ExtendedGDBusInterfaceInfo;

typedef struct
{
  const _ExtendedGDBusPropertyInfo *info;
  guint prop_id;
  GValue orig_value; /* the value before the change */
} ChangedProperty;

static void
_changed_property_free (ChangedProperty *data)
{
  g_value_unset (&data->orig_value);
  g_free (data);
}

static gboolean
_g_strv_equal0 (gchar **a, gchar **b)
{
  gboolean ret = FALSE;
  guint n;
  if (a == NULL && b == NULL)
    {
      ret = TRUE;
      goto out;
    }
  if (a == NULL || b == NULL)
    goto out;
  if (g_strv_length (a) != g_strv_length (b))
    goto out;
  for (n = 0; a[n] != NULL; n++)
    if (g_strcmp0 (a[n], b[n]) != 0)
      goto out;
  ret = TRUE;
out:
  return ret;
}

static gboolean
_g_variant_equal0 (GVariant *a, GVariant *b)
{
  gboolean ret = FALSE;
  if (a == NULL && b == NULL)
    {
      ret = TRUE;
      goto out;
    }
  if (a == NULL || b == NULL)
    goto out;
  ret = g_variant_equal (a, b);
out:
  return ret;
}

G_GNUC_UNUSED static gboolean
_g_value_equal (const GValue *a, const GValue *b)
{
  gboolean ret = FALSE;
  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
  switch (G_VALUE_TYPE (a))
    {
      case G_TYPE_BOOLEAN:
        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
        break;
      case G_TYPE_UCHAR:
        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
        break;
      case G_TYPE_INT:
        ret = (g_value_get_int (a) == g_value_get_int (b));
        break;
      case G_TYPE_UINT:
        ret = (g_value_get_uint (a) == g_value_get_uint (b));
        break;
      case G_TYPE_INT64:
        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
        break;
      case G_TYPE_UINT64:
        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
        break;
      case G_TYPE_DOUBLE:
        {
          /* Avoid -Wfloat-equal warnings by doing a direct bit compare */
          gdouble da = g_value_get_double (a);
          gdouble db = g_value_get_double (b);
          ret = memcmp (&da, &db, sizeof (gdouble)) == 0;
        }
        break;
      case G_TYPE_STRING:
        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
        break;
      case G_TYPE_VARIANT:
        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
        break;
      default:
        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
        else
          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
        break;
    }
  return ret;
}

/* ------------------------------------------------------------------------
 * Code for interface org.freedesktop.DBus.Introspectable
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:alarmClockServiceOrgFreedesktopDBusIntrospectable
 * @title: alarmClockServiceOrgFreedesktopDBusIntrospectable
 * @short_description: Generated C code for the org.freedesktop.DBus.Introspectable D-Bus interface
 *
 * This section contains code for working with the <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link> D-Bus interface in C.
 */

/* ---- Introspection data for org.freedesktop.DBus.Introspectable ---- */

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect_OUT_ARG_data =
{
  {
    -1,
    (gchar *) "data",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect_OUT_ARG_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect_OUT_ARG_data,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect =
{
  {
    -1,
    (gchar *) "Introspect",
    NULL,
    (GDBusArgInfo **) &_alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect_OUT_ARG_pointers,
    NULL
  },
  "handle-introspect",
  FALSE
};

static const _ExtendedGDBusMethodInfo * const _alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_introspect,
  NULL
};

static const _ExtendedGDBusInterfaceInfo _alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info =
{
  {
    -1,
    (gchar *) "org.freedesktop.DBus.Introspectable",
    (GDBusMethodInfo **) &_alarm_clock_service_org_freedesktop_dbus_introspectable_method_info_pointers,
    NULL,
    NULL,
    NULL
  },
  "org-freedesktop-dbus-introspectable",
};


/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info:
 *
 * Gets a machine-readable description of the <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link> D-Bus interface.
 *
 * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
 */
GDBusInterfaceInfo *
alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info (void)
{
  return (GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_override_properties:
 * @klass: The class structure for a #GObject<!-- -->-derived class.
 * @property_id_begin: The property id to assign to the first overridden property.
 *
 * Overrides all #GObject properties in the #alarmClockServiceOrgFreedesktopDBusIntrospectable interface for a concrete class.
 * The properties are overridden in the order they are defined.
 *
 * Returns: The last property id.
 */
guint
alarm_clock_service_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin)
{
  return property_id_begin - 1;
}



/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectable:
 *
 * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectableIface:
 * @parent_iface: The parent interface.
 * @handle_introspect: Handler for the #alarmClockServiceOrgFreedesktopDBusIntrospectable::handle-introspect signal.
 *
 * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>.
 */

typedef alarmClockServiceOrgFreedesktopDBusIntrospectableIface alarmClockServiceOrgFreedesktopDBusIntrospectableInterface;
G_DEFINE_INTERFACE (alarmClockServiceOrgFreedesktopDBusIntrospectable, alarm_clock_service_org_freedesktop_dbus_introspectable, G_TYPE_OBJECT);

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_default_init (alarmClockServiceOrgFreedesktopDBusIntrospectableIface *iface)
{
  /* GObject signals for incoming D-Bus method calls: */
  /**
   * alarmClockServiceOrgFreedesktopDBusIntrospectable::handle-introspect:
   * @object: A #alarmClockServiceOrgFreedesktopDBusIntrospectable.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-DBus-Introspectable.Introspect">Introspect()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_org_freedesktop_dbus_introspectable_complete_introspect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-introspect",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceOrgFreedesktopDBusIntrospectableIface, handle_introspect),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusIntrospectableProxy.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Introspectable.Introspect">Introspect()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "Introspect",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_finish:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusIntrospectableProxy.
 * @out_data: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_finish (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_data);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_sync:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusIntrospectableProxy.
 * @out_data: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Introspectable.Introspect">Introspect()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_introspectable_call_introspect_sync (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "Introspect",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_data);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_complete_introspect:
 * @object: A #alarmClockServiceOrgFreedesktopDBusIntrospectable.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @data: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-DBus-Introspectable.Introspect">Introspect()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_org_freedesktop_dbus_introspectable_complete_introspect (
    alarmClockServiceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *data)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(s)",
                   data));
}

/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectableProxy:
 *
 * The #alarmClockServiceOrgFreedesktopDBusIntrospectableProxy structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceOrgFreedesktopDBusIntrospectableProxy.
 */

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate
{
  GData *qdata;
};

static void alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_iface_init (alarmClockServiceOrgFreedesktopDBusIntrospectableIface *iface);

#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusIntrospectableProxy, alarm_clock_service_org_freedesktop_dbus_introspectable_proxy, G_TYPE_DBUS_PROXY,
                         G_ADD_PRIVATE (alarmClockServiceOrgFreedesktopDBusIntrospectableProxy)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusIntrospectableProxy, alarm_clock_service_org_freedesktop_dbus_introspectable_proxy, G_TYPE_DBUS_PROXY,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_iface_init));

#endif
static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_finalize (GObject *object)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableProxy *proxy = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (object);
  g_datalist_clear (&proxy->priv->qdata);
  G_OBJECT_CLASS (alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_parent_class)->finalize (object);
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_get_property (GObject      *object,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_set_property (GObject      *object,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_g_signal (GDBusProxy *proxy,
  const gchar *sender_name G_GNUC_UNUSED,
  const gchar *signal_name,
  GVariant *parameters)
{
  _ExtendedGDBusSignalInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint n;
  guint signal_id;
  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct, signal_name);
  if (info == NULL)
    return;
  num_params = g_variant_n_children (parameters);
  paramv = g_new0 (GValue, num_params + 1);
  g_value_init (&paramv[0], ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE);
  g_value_set_object (&paramv[0], proxy);
  g_variant_iter_init (&iter, parameters);
  n = 1;
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE);
  g_signal_emitv (paramv, signal_id, 0, NULL);
  for (n = 0; n < num_params + 1; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_g_properties_changed (GDBusProxy *_proxy,
  GVariant *changed_properties,
  const gchar *const *invalidated_properties)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableProxy *proxy = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (_proxy);
  guint n;
  const gchar *key;
  GVariantIter *iter;
  _ExtendedGDBusPropertyInfo *info;
  g_variant_get (changed_properties, "a{sv}", &iter);
  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct, key);
      g_datalist_remove_data (&proxy->priv->qdata, key);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
  g_variant_iter_free (iter);
  for (n = 0; invalidated_properties[n] != NULL; n++)
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct, invalidated_properties[n]);
      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_init (alarmClockServiceOrgFreedesktopDBusIntrospectableProxy *proxy)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  proxy->priv = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_get_instance_private (proxy);
#else
  proxy->priv = G_TYPE_INSTANCE_GET_PRIVATE (proxy, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate);
#endif

  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info ());
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_class_init (alarmClockServiceOrgFreedesktopDBusIntrospectableProxyClass *klass)
{
  GObjectClass *gobject_class;
  GDBusProxyClass *proxy_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize     = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_finalize;
  gobject_class->get_property = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_get_property;
  gobject_class->set_property = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_set_property;

  proxy_class = G_DBUS_PROXY_CLASS (klass);
  proxy_class->g_signal = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_g_signal;
  proxy_class->g_properties_changed = alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_g_properties_changed;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceOrgFreedesktopDBusIntrospectableProxyPrivate));
#endif
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_iface_init (alarmClockServiceOrgFreedesktopDBusIntrospectableIface *iface)
{
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>. See g_dbus_proxy_new() for more details.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Introspectable", NULL);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new().
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusIntrospectableProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_sync:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>. See g_dbus_proxy_new_sync() for more details.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusIntrospectableProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Introspectable", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
  else
    return NULL;
}


/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Like alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Introspectable", NULL);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus().
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusIntrospectableProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Like alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusIntrospectableProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *
alarm_clock_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Introspectable", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
  else
    return NULL;
}


/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton:
 *
 * The #alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton.
 */

struct _alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate
{
  GValue *properties;
  GList *changed_properties;
  GSource *changed_properties_idle_source;
  GMainContext *context;
  GMutex lock;
};

static void
_alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_method_call (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name,
  const gchar *method_name,
  GVariant *parameters,
  GDBusMethodInvocation *invocation,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (user_data);
  _ExtendedGDBusMethodInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint num_extra;
  guint n;
  guint signal_id;
  GValue return_value = G_VALUE_INIT;
  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
  g_assert (info != NULL);
  num_params = g_variant_n_children (parameters);
  num_extra = info->pass_fdlist ? 3 : 2;  paramv = g_new0 (GValue, num_params + num_extra);
  n = 0;
  g_value_init (&paramv[n], ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE);
  g_value_set_object (&paramv[n++], skeleton);
  g_value_init (&paramv[n], G_TYPE_DBUS_METHOD_INVOCATION);
  g_value_set_object (&paramv[n++], invocation);
  if (info->pass_fdlist)
    {
#ifdef G_OS_UNIX
      g_value_init (&paramv[n], G_TYPE_UNIX_FD_LIST);
      g_value_set_object (&paramv[n++], g_dbus_message_get_unix_fd_list (g_dbus_method_invocation_get_message (invocation)));
#else
      g_assert_not_reached ();
#endif
    }
  g_variant_iter_init (&iter, parameters);
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - num_extra];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE);
  g_value_init (&return_value, G_TYPE_BOOLEAN);
  g_signal_emitv (paramv, signal_id, 0, &return_value);
  if (!g_value_get_boolean (&return_value))
    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
  g_value_unset (&return_value);
  for (n = 0; n < num_params + num_extra; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static GVariant *
_alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_get_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  GVariant *ret;
  ret = NULL;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      g_value_init (&value, pspec->value_type);
      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
      g_value_unset (&value);
    }
  return ret;
}

static gboolean
_alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_set_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GVariant *variant,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  gboolean ret;
  ret = FALSE;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      if (info->use_gvariant)
        g_value_set_variant (&value, variant);
      else
        g_dbus_gvariant_to_gvalue (variant, &value);
      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      g_value_unset (&value);
      ret = TRUE;
    }
  return ret;
}

static const GDBusInterfaceVTable _alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_vtable =
{
  _alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_method_call,
  _alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_get_property,
  _alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_set_property,
  {NULL}
};

static GDBusInterfaceInfo *
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info ();
}

static GDBusInterfaceVTable *
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return (GDBusInterfaceVTable *) &_alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_vtable;
}

static GVariant *
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (_skeleton);

  GVariantBuilder builder;
  guint n;
  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
  if (_alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct.properties == NULL)
    goto out;
  for (n = 0; _alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct.properties[n] != NULL; n++)
    {
      GDBusPropertyInfo *info = _alarm_clock_service_org_freedesktop_dbus_introspectable_interface_info.parent_struct.properties[n];
      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
        {
          GVariant *value;
          value = _alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.freedesktop.DBus.Introspectable", info->name, NULL, skeleton);
          if (value != NULL)
            {
              g_variant_take_ref (value);
              g_variant_builder_add (&builder, "{sv}", info->name, value);
              g_variant_unref (value);
            }
        }
    }
out:
  return g_variant_builder_end (&builder);
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
{
}

static void alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_iface_init (alarmClockServiceOrgFreedesktopDBusIntrospectableIface *iface);
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton, alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_ADD_PRIVATE (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton, alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_iface_init));

#endif
static void
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_finalize (GObject *object)
{
  alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (object);
  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
  if (skeleton->priv->changed_properties_idle_source != NULL)
    g_source_destroy (skeleton->priv->changed_properties_idle_source);
  g_main_context_unref (skeleton->priv->context);
  g_mutex_clear (&skeleton->priv->lock);
  G_OBJECT_CLASS (alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_parent_class)->finalize (object);
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_init (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton *skeleton)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  skeleton->priv = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_get_instance_private (skeleton);
#else
  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate);
#endif

  g_mutex_init (&skeleton->priv->lock);
  skeleton->priv->context = g_main_context_ref_thread_default ();
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_class_init (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonClass *klass)
{
  GObjectClass *gobject_class;
  GDBusInterfaceSkeletonClass *skeleton_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_finalize;

  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
  skeleton_class->get_info = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_info;
  skeleton_class->get_properties = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_properties;
  skeleton_class->flush = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_flush;
  skeleton_class->get_vtable = alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_dbus_interface_get_vtable;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate));
#endif
}

static void
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_iface_init (alarmClockServiceOrgFreedesktopDBusIntrospectableIface *iface)
{
}

/**
 * alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_new:
 *
 * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusIntrospectableSkeleton): The skeleton object.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *
alarm_clock_service_org_freedesktop_dbus_introspectable_skeleton_new (void)
{
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (g_object_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, NULL));
}

/* ------------------------------------------------------------------------
 * Code for interface org.freedesktop.DBus.Properties
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:alarmClockServiceOrgFreedesktopDBusProperties
 * @title: alarmClockServiceOrgFreedesktopDBusProperties
 * @short_description: Generated C code for the org.freedesktop.DBus.Properties D-Bus interface
 *
 * This section contains code for working with the <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link> D-Bus interface in C.
 */

/* ---- Introspection data for org.freedesktop.DBus.Properties ---- */

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_interface =
{
  {
    -1,
    (gchar *) "interface",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_property =
{
  {
    -1,
    (gchar *) "property",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_interface,
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_property,
  NULL
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_OUT_ARG_value =
{
  {
    -1,
    (gchar *) "value",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_OUT_ARG_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_OUT_ARG_value,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get =
{
  {
    -1,
    (gchar *) "Get",
    (GDBusArgInfo **) &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_IN_ARG_pointers,
    (GDBusArgInfo **) &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_OUT_ARG_pointers,
    NULL
  },
  "handle-get",
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_IN_ARG_interface =
{
  {
    -1,
    (gchar *) "interface",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_IN_ARG_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_IN_ARG_interface,
  NULL
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_OUT_ARG_properties =
{
  {
    -1,
    (gchar *) "properties",
    (gchar *) "a{sv}",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_OUT_ARG_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_OUT_ARG_properties,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all =
{
  {
    -1,
    (gchar *) "GetAll",
    (GDBusArgInfo **) &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_IN_ARG_pointers,
    (GDBusArgInfo **) &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all_OUT_ARG_pointers,
    NULL
  },
  "handle-get-all",
  FALSE
};

static const _ExtendedGDBusMethodInfo * const _alarm_clock_service_org_freedesktop_dbus_properties_method_info_pointers[] =
{
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get,
  &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_get_all,
  NULL
};

static const _ExtendedGDBusInterfaceInfo _alarm_clock_service_org_freedesktop_dbus_properties_interface_info =
{
  {
    -1,
    (gchar *) "org.freedesktop.DBus.Properties",
    (GDBusMethodInfo **) &_alarm_clock_service_org_freedesktop_dbus_properties_method_info_pointers,
    NULL,
    NULL,
    NULL
  },
  "org-freedesktop-dbus-properties",
};


/**
 * alarm_clock_service_org_freedesktop_dbus_properties_interface_info:
 *
 * Gets a machine-readable description of the <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link> D-Bus interface.
 *
 * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
 */
GDBusInterfaceInfo *
alarm_clock_service_org_freedesktop_dbus_properties_interface_info (void)
{
  return (GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_override_properties:
 * @klass: The class structure for a #GObject<!-- -->-derived class.
 * @property_id_begin: The property id to assign to the first overridden property.
 *
 * Overrides all #GObject properties in the #alarmClockServiceOrgFreedesktopDBusProperties interface for a concrete class.
 * The properties are overridden in the order they are defined.
 *
 * Returns: The last property id.
 */
guint
alarm_clock_service_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin)
{
  return property_id_begin - 1;
}



/**
 * alarmClockServiceOrgFreedesktopDBusProperties:
 *
 * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusPropertiesIface:
 * @parent_iface: The parent interface.
 * @handle_get: Handler for the #alarmClockServiceOrgFreedesktopDBusProperties::handle-get signal.
 * @handle_get_all: Handler for the #alarmClockServiceOrgFreedesktopDBusProperties::handle-get-all signal.
 *
 * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>.
 */

typedef alarmClockServiceOrgFreedesktopDBusPropertiesIface alarmClockServiceOrgFreedesktopDBusPropertiesInterface;
G_DEFINE_INTERFACE (alarmClockServiceOrgFreedesktopDBusProperties, alarm_clock_service_org_freedesktop_dbus_properties, G_TYPE_OBJECT);

static void
alarm_clock_service_org_freedesktop_dbus_properties_default_init (alarmClockServiceOrgFreedesktopDBusPropertiesIface *iface)
{
  /* GObject signals for incoming D-Bus method calls: */
  /**
   * alarmClockServiceOrgFreedesktopDBusProperties::handle-get:
   * @object: A #alarmClockServiceOrgFreedesktopDBusProperties.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_interface: Argument passed by remote caller.
   * @arg_property: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.Get">Get()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_org_freedesktop_dbus_properties_complete_get() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-get",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceOrgFreedesktopDBusPropertiesIface, handle_get),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    3,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING);

  /**
   * alarmClockServiceOrgFreedesktopDBusProperties::handle-get-all:
   * @object: A #alarmClockServiceOrgFreedesktopDBusProperties.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_interface: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.GetAll">GetAll()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_org_freedesktop_dbus_properties_complete_get_all() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-get-all",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceOrgFreedesktopDBusPropertiesIface, handle_get_all),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @arg_interface: Argument to pass with the method invocation.
 * @arg_property: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.Get">Get()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_properties_call_get_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_call_get_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_call_get (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "Get",
    g_variant_new ("(ss)",
                   arg_interface,
                   arg_property),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get_finish:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @out_value: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_properties_call_get().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_properties_call_get().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_properties_call_get_finish (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_value);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get_sync:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @arg_interface: Argument to pass with the method invocation.
 * @arg_property: Argument to pass with the method invocation.
 * @out_value: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.Get">Get()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_call_get() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_properties_call_get_sync (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "Get",
    g_variant_new ("(ss)",
                   arg_interface,
                   arg_property),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_value);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get_all:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @arg_interface: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.GetAll">GetAll()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_call_get_all (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetAll",
    g_variant_new ("(s)",
                   arg_interface),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_finish:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @out_properties: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_properties_call_get_all().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_properties_call_get_all().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_finish (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(@a{sv})",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_sync:
 * @proxy: A #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 * @arg_interface: Argument to pass with the method invocation.
 * @out_properties: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.GetAll">GetAll()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_call_get_all() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_org_freedesktop_dbus_properties_call_get_all_sync (
    alarmClockServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetAll",
    g_variant_new ("(s)",
                   arg_interface),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(@a{sv})",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_complete_get:
 * @object: A #alarmClockServiceOrgFreedesktopDBusProperties.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @value: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.Get">Get()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_complete_get (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *value)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(s)",
                   value));
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_complete_get_all:
 * @object: A #alarmClockServiceOrgFreedesktopDBusProperties.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @properties: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-DBus-Properties.GetAll">GetAll()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_complete_get_all (
    alarmClockServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(@a{sv})",
                   properties));
}

/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceOrgFreedesktopDBusPropertiesProxy:
 *
 * The #alarmClockServiceOrgFreedesktopDBusPropertiesProxy structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceOrgFreedesktopDBusPropertiesProxy.
 */

struct _alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate
{
  GData *qdata;
};

static void alarm_clock_service_org_freedesktop_dbus_properties_proxy_iface_init (alarmClockServiceOrgFreedesktopDBusPropertiesIface *iface);

#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusPropertiesProxy, alarm_clock_service_org_freedesktop_dbus_properties_proxy, G_TYPE_DBUS_PROXY,
                         G_ADD_PRIVATE (alarmClockServiceOrgFreedesktopDBusPropertiesProxy)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarm_clock_service_org_freedesktop_dbus_properties_proxy_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusPropertiesProxy, alarm_clock_service_org_freedesktop_dbus_properties_proxy, G_TYPE_DBUS_PROXY,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarm_clock_service_org_freedesktop_dbus_properties_proxy_iface_init));

#endif
static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_finalize (GObject *object)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesProxy *proxy = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (object);
  g_datalist_clear (&proxy->priv->qdata);
  G_OBJECT_CLASS (alarm_clock_service_org_freedesktop_dbus_properties_proxy_parent_class)->finalize (object);
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_get_property (GObject      *object,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_set_property (GObject      *object,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_g_signal (GDBusProxy *proxy,
  const gchar *sender_name G_GNUC_UNUSED,
  const gchar *signal_name,
  GVariant *parameters)
{
  _ExtendedGDBusSignalInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint n;
  guint signal_id;
  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct, signal_name);
  if (info == NULL)
    return;
  num_params = g_variant_n_children (parameters);
  paramv = g_new0 (GValue, num_params + 1);
  g_value_init (&paramv[0], ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES);
  g_value_set_object (&paramv[0], proxy);
  g_variant_iter_init (&iter, parameters);
  n = 1;
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES);
  g_signal_emitv (paramv, signal_id, 0, NULL);
  for (n = 0; n < num_params + 1; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_g_properties_changed (GDBusProxy *_proxy,
  GVariant *changed_properties,
  const gchar *const *invalidated_properties)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesProxy *proxy = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (_proxy);
  guint n;
  const gchar *key;
  GVariantIter *iter;
  _ExtendedGDBusPropertyInfo *info;
  g_variant_get (changed_properties, "a{sv}", &iter);
  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct, key);
      g_datalist_remove_data (&proxy->priv->qdata, key);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
  g_variant_iter_free (iter);
  for (n = 0; invalidated_properties[n] != NULL; n++)
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct, invalidated_properties[n]);
      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_init (alarmClockServiceOrgFreedesktopDBusPropertiesProxy *proxy)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  proxy->priv = alarm_clock_service_org_freedesktop_dbus_properties_proxy_get_instance_private (proxy);
#else
  proxy->priv = G_TYPE_INSTANCE_GET_PRIVATE (proxy, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate);
#endif

  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), alarm_clock_service_org_freedesktop_dbus_properties_interface_info ());
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_class_init (alarmClockServiceOrgFreedesktopDBusPropertiesProxyClass *klass)
{
  GObjectClass *gobject_class;
  GDBusProxyClass *proxy_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize     = alarm_clock_service_org_freedesktop_dbus_properties_proxy_finalize;
  gobject_class->get_property = alarm_clock_service_org_freedesktop_dbus_properties_proxy_get_property;
  gobject_class->set_property = alarm_clock_service_org_freedesktop_dbus_properties_proxy_set_property;

  proxy_class = G_DBUS_PROXY_CLASS (klass);
  proxy_class->g_signal = alarm_clock_service_org_freedesktop_dbus_properties_proxy_g_signal;
  proxy_class->g_properties_changed = alarm_clock_service_org_freedesktop_dbus_properties_proxy_g_properties_changed;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceOrgFreedesktopDBusPropertiesProxyPrivate));
#endif
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_iface_init (alarmClockServiceOrgFreedesktopDBusPropertiesIface *iface)
{
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>. See g_dbus_proxy_new() for more details.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Properties", NULL);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_properties_proxy_new().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_properties_proxy_new().
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusPropertiesProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusProperties *
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_sync:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>. See g_dbus_proxy_new_sync() for more details.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_proxy_new() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusPropertiesProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusProperties *
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Properties", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
  else
    return NULL;
}


/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Like alarm_clock_service_org_freedesktop_dbus_properties_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_finish() to get the result of the operation.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Properties", NULL);
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus().
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusPropertiesProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusProperties *
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_sync:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Like alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusPropertiesProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceOrgFreedesktopDBusProperties *
alarm_clock_service_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.freedesktop.DBus.Properties", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
  else
    return NULL;
}


/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton:
 *
 * The #alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton.
 */

struct _alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate
{
  GValue *properties;
  GList *changed_properties;
  GSource *changed_properties_idle_source;
  GMainContext *context;
  GMutex lock;
};

static void
_alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_method_call (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name,
  const gchar *method_name,
  GVariant *parameters,
  GDBusMethodInvocation *invocation,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (user_data);
  _ExtendedGDBusMethodInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint num_extra;
  guint n;
  guint signal_id;
  GValue return_value = G_VALUE_INIT;
  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
  g_assert (info != NULL);
  num_params = g_variant_n_children (parameters);
  num_extra = info->pass_fdlist ? 3 : 2;  paramv = g_new0 (GValue, num_params + num_extra);
  n = 0;
  g_value_init (&paramv[n], ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES);
  g_value_set_object (&paramv[n++], skeleton);
  g_value_init (&paramv[n], G_TYPE_DBUS_METHOD_INVOCATION);
  g_value_set_object (&paramv[n++], invocation);
  if (info->pass_fdlist)
    {
#ifdef G_OS_UNIX
      g_value_init (&paramv[n], G_TYPE_UNIX_FD_LIST);
      g_value_set_object (&paramv[n++], g_dbus_message_get_unix_fd_list (g_dbus_method_invocation_get_message (invocation)));
#else
      g_assert_not_reached ();
#endif
    }
  g_variant_iter_init (&iter, parameters);
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - num_extra];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES);
  g_value_init (&return_value, G_TYPE_BOOLEAN);
  g_signal_emitv (paramv, signal_id, 0, &return_value);
  if (!g_value_get_boolean (&return_value))
    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
  g_value_unset (&return_value);
  for (n = 0; n < num_params + num_extra; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static GVariant *
_alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_get_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  GVariant *ret;
  ret = NULL;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      g_value_init (&value, pspec->value_type);
      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
      g_value_unset (&value);
    }
  return ret;
}

static gboolean
_alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_set_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GVariant *variant,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  gboolean ret;
  ret = FALSE;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      if (info->use_gvariant)
        g_value_set_variant (&value, variant);
      else
        g_dbus_gvariant_to_gvalue (variant, &value);
      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      g_value_unset (&value);
      ret = TRUE;
    }
  return ret;
}

static const GDBusInterfaceVTable _alarm_clock_service_org_freedesktop_dbus_properties_skeleton_vtable =
{
  _alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_method_call,
  _alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_get_property,
  _alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_set_property,
  {NULL}
};

static GDBusInterfaceInfo *
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return alarm_clock_service_org_freedesktop_dbus_properties_interface_info ();
}

static GDBusInterfaceVTable *
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return (GDBusInterfaceVTable *) &_alarm_clock_service_org_freedesktop_dbus_properties_skeleton_vtable;
}

static GVariant *
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (_skeleton);

  GVariantBuilder builder;
  guint n;
  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
  if (_alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct.properties == NULL)
    goto out;
  for (n = 0; _alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct.properties[n] != NULL; n++)
    {
      GDBusPropertyInfo *info = _alarm_clock_service_org_freedesktop_dbus_properties_interface_info.parent_struct.properties[n];
      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
        {
          GVariant *value;
          value = _alarm_clock_service_org_freedesktop_dbus_properties_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.freedesktop.DBus.Properties", info->name, NULL, skeleton);
          if (value != NULL)
            {
              g_variant_take_ref (value);
              g_variant_builder_add (&builder, "{sv}", info->name, value);
              g_variant_unref (value);
            }
        }
    }
out:
  return g_variant_builder_end (&builder);
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
{
}

static void alarm_clock_service_org_freedesktop_dbus_properties_skeleton_iface_init (alarmClockServiceOrgFreedesktopDBusPropertiesIface *iface);
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton, alarm_clock_service_org_freedesktop_dbus_properties_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_ADD_PRIVATE (alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarm_clock_service_org_freedesktop_dbus_properties_skeleton_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton, alarm_clock_service_org_freedesktop_dbus_properties_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarm_clock_service_org_freedesktop_dbus_properties_skeleton_iface_init));

#endif
static void
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_finalize (GObject *object)
{
  alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton = ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (object);
  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
  if (skeleton->priv->changed_properties_idle_source != NULL)
    g_source_destroy (skeleton->priv->changed_properties_idle_source);
  g_main_context_unref (skeleton->priv->context);
  g_mutex_clear (&skeleton->priv->lock);
  G_OBJECT_CLASS (alarm_clock_service_org_freedesktop_dbus_properties_skeleton_parent_class)->finalize (object);
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_init (alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton *skeleton)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  skeleton->priv = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_get_instance_private (skeleton);
#else
  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate);
#endif

  g_mutex_init (&skeleton->priv->lock);
  skeleton->priv->context = g_main_context_ref_thread_default ();
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_class_init (alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonClass *klass)
{
  GObjectClass *gobject_class;
  GDBusInterfaceSkeletonClass *skeleton_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_finalize;

  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
  skeleton_class->get_info = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_info;
  skeleton_class->get_properties = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_properties;
  skeleton_class->flush = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_flush;
  skeleton_class->get_vtable = alarm_clock_service_org_freedesktop_dbus_properties_skeleton_dbus_interface_get_vtable;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceOrgFreedesktopDBusPropertiesSkeletonPrivate));
#endif
}

static void
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_iface_init (alarmClockServiceOrgFreedesktopDBusPropertiesIface *iface)
{
}

/**
 * alarm_clock_service_org_freedesktop_dbus_properties_skeleton_new:
 *
 * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>.
 *
 * Returns: (transfer full) (type alarmClockServiceOrgFreedesktopDBusPropertiesSkeleton): The skeleton object.
 */
alarmClockServiceOrgFreedesktopDBusProperties *
alarm_clock_service_org_freedesktop_dbus_properties_skeleton_new (void)
{
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (g_object_new (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, NULL));
}

/* ------------------------------------------------------------------------
 * Code for interface com.example.AlarmService.AlarmInterface
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:alarmClockServiceAlarmInterface
 * @title: alarmClockServiceAlarmInterface
 * @short_description: Generated C code for the com.example.AlarmService.AlarmInterface D-Bus interface
 *
 * This section contains code for working with the <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link> D-Bus interface in C.
 */

/* ---- Introspection data for com.example.AlarmService.AlarmInterface ---- */

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_day =
{
  {
    -1,
    (gchar *) "day",
    (gchar *) "q",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_month =
{
  {
    -1,
    (gchar *) "month",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_year =
{
  {
    -1,
    (gchar *) "year",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_hour =
{
  {
    -1,
    (gchar *) "hour",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_min =
{
  {
    -1,
    (gchar *) "min",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_sec =
{
  {
    -1,
    (gchar *) "sec",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_pointers[] =
{
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_day,
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_month,
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_year,
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_hour,
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_min,
  &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_sec,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_alarm_interface_method_info_set_time =
{
  {
    -1,
    (gchar *) "setTime",
    (GDBusArgInfo **) &_alarm_clock_service_alarm_interface_method_info_set_time_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-set-time",
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_day =
{
  {
    -1,
    (gchar *) "day",
    (gchar *) "q",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_month =
{
  {
    -1,
    (gchar *) "month",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_year =
{
  {
    -1,
    (gchar *) "year",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_hour =
{
  {
    -1,
    (gchar *) "hour",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_min =
{
  {
    -1,
    (gchar *) "min",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_sec =
{
  {
    -1,
    (gchar *) "sec",
    (gchar *) "y",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_pointers[] =
{
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_day,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_month,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_year,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_hour,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_min,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_sec,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_time =
{
  {
    -1,
    (gchar *) "setAlarmTime",
    (GDBusArgInfo **) &_alarm_clock_service_alarm_interface_method_info_set_alarm_time_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-set-alarm-time",
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_status_IN_ARG_alarm_status =
{
  {
    -1,
    (gchar *) "alarm_status",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_alarm_interface_method_info_set_alarm_status_IN_ARG_pointers[] =
{
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_status_IN_ARG_alarm_status,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_alarm_interface_method_info_set_alarm_status =
{
  {
    -1,
    (gchar *) "setAlarmStatus",
    (GDBusArgInfo **) &_alarm_clock_service_alarm_interface_method_info_set_alarm_status_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-set-alarm-status",
  FALSE
};

static const _ExtendedGDBusArgInfo _alarm_clock_service_alarm_interface_method_info_get_alarm_status_OUT_ARG_alarm_status =
{
  {
    -1,
    (gchar *) "alarm_status",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo * const _alarm_clock_service_alarm_interface_method_info_get_alarm_status_OUT_ARG_pointers[] =
{
  &_alarm_clock_service_alarm_interface_method_info_get_alarm_status_OUT_ARG_alarm_status,
  NULL
};

static const _ExtendedGDBusMethodInfo _alarm_clock_service_alarm_interface_method_info_get_alarm_status =
{
  {
    -1,
    (gchar *) "getAlarmStatus",
    NULL,
    (GDBusArgInfo **) &_alarm_clock_service_alarm_interface_method_info_get_alarm_status_OUT_ARG_pointers,
    NULL
  },
  "handle-get-alarm-status",
  FALSE
};

static const _ExtendedGDBusMethodInfo * const _alarm_clock_service_alarm_interface_method_info_pointers[] =
{
  &_alarm_clock_service_alarm_interface_method_info_set_time,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_time,
  &_alarm_clock_service_alarm_interface_method_info_set_alarm_status,
  &_alarm_clock_service_alarm_interface_method_info_get_alarm_status,
  NULL
};

static const _ExtendedGDBusSignalInfo _alarm_clock_service_alarm_interface_signal_info_ring_alarm =
{
  {
    -1,
    (gchar *) "ringAlarm",
    NULL,
    NULL
  },
  "ring-alarm"
};

static const _ExtendedGDBusSignalInfo * const _alarm_clock_service_alarm_interface_signal_info_pointers[] =
{
  &_alarm_clock_service_alarm_interface_signal_info_ring_alarm,
  NULL
};

static const _ExtendedGDBusInterfaceInfo _alarm_clock_service_alarm_interface_interface_info =
{
  {
    -1,
    (gchar *) "com.example.AlarmService.AlarmInterface",
    (GDBusMethodInfo **) &_alarm_clock_service_alarm_interface_method_info_pointers,
    (GDBusSignalInfo **) &_alarm_clock_service_alarm_interface_signal_info_pointers,
    NULL,
    NULL
  },
  "alarm-interface",
};


/**
 * alarm_clock_service_alarm_interface_interface_info:
 *
 * Gets a machine-readable description of the <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link> D-Bus interface.
 *
 * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
 */
GDBusInterfaceInfo *
alarm_clock_service_alarm_interface_interface_info (void)
{
  return (GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct;
}

/**
 * alarm_clock_service_alarm_interface_override_properties:
 * @klass: The class structure for a #GObject<!-- -->-derived class.
 * @property_id_begin: The property id to assign to the first overridden property.
 *
 * Overrides all #GObject properties in the #alarmClockServiceAlarmInterface interface for a concrete class.
 * The properties are overridden in the order they are defined.
 *
 * Returns: The last property id.
 */
guint
alarm_clock_service_alarm_interface_override_properties (GObjectClass *klass, guint property_id_begin)
{
  return property_id_begin - 1;
}



/**
 * alarmClockServiceAlarmInterface:
 *
 * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>.
 */

/**
 * alarmClockServiceAlarmInterfaceIface:
 * @parent_iface: The parent interface.
 * @handle_get_alarm_status: Handler for the #alarmClockServiceAlarmInterface::handle-get-alarm-status signal.
 * @handle_set_alarm_status: Handler for the #alarmClockServiceAlarmInterface::handle-set-alarm-status signal.
 * @handle_set_alarm_time: Handler for the #alarmClockServiceAlarmInterface::handle-set-alarm-time signal.
 * @handle_set_time: Handler for the #alarmClockServiceAlarmInterface::handle-set-time signal.
 * @ring_alarm: Handler for the #alarmClockServiceAlarmInterface::ring-alarm signal.
 *
 * Virtual table for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>.
 */

typedef alarmClockServiceAlarmInterfaceIface alarmClockServiceAlarmInterfaceInterface;
G_DEFINE_INTERFACE (alarmClockServiceAlarmInterface, alarm_clock_service_alarm_interface, G_TYPE_OBJECT);

static void
alarm_clock_service_alarm_interface_default_init (alarmClockServiceAlarmInterfaceIface *iface)
{
  /* GObject signals for incoming D-Bus method calls: */
  /**
   * alarmClockServiceAlarmInterface::handle-set-time:
   * @object: A #alarmClockServiceAlarmInterface.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_day: Argument passed by remote caller.
   * @arg_month: Argument passed by remote caller.
   * @arg_year: Argument passed by remote caller.
   * @arg_hour: Argument passed by remote caller.
   * @arg_min: Argument passed by remote caller.
   * @arg_sec: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setTime">setTime()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_alarm_interface_complete_set_time() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-set-time",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceAlarmInterfaceIface, handle_set_time),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    7,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_UINT, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR);

  /**
   * alarmClockServiceAlarmInterface::handle-set-alarm-time:
   * @object: A #alarmClockServiceAlarmInterface.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_day: Argument passed by remote caller.
   * @arg_month: Argument passed by remote caller.
   * @arg_year: Argument passed by remote caller.
   * @arg_hour: Argument passed by remote caller.
   * @arg_min: Argument passed by remote caller.
   * @arg_sec: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmTime">setAlarmTime()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_alarm_interface_complete_set_alarm_time() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-set-alarm-time",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceAlarmInterfaceIface, handle_set_alarm_time),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    7,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_UINT, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR, G_TYPE_UCHAR);

  /**
   * alarmClockServiceAlarmInterface::handle-set-alarm-status:
   * @object: A #alarmClockServiceAlarmInterface.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_alarm_status: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmStatus">setAlarmStatus()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_alarm_interface_complete_set_alarm_status() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-set-alarm-status",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceAlarmInterfaceIface, handle_set_alarm_status),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * alarmClockServiceAlarmInterface::handle-get-alarm-status:
   * @object: A #alarmClockServiceAlarmInterface.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.getAlarmStatus">getAlarmStatus()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call alarm_clock_service_alarm_interface_complete_get_alarm_status() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   */
  g_signal_new ("handle-get-alarm-status",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceAlarmInterfaceIface, handle_get_alarm_status),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

  /* GObject signals for received D-Bus signals: */
  /**
   * alarmClockServiceAlarmInterface::ring-alarm:
   * @object: A #alarmClockServiceAlarmInterface.
   *
   * On the client-side, this signal is emitted whenever the D-Bus signal <link linkend="gdbus-signal-com-example-AlarmService-AlarmInterface.ringAlarm">"ringAlarm"</link> is received.
   *
   * On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.
   */
  g_signal_new ("ring-alarm",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (alarmClockServiceAlarmInterfaceIface, ring_alarm),
    NULL,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_NONE,
    0);

}

/**
 * alarm_clock_service_alarm_interface_emit_ring_alarm:
 * @object: A #alarmClockServiceAlarmInterface.
 *
 * Emits the <link linkend="gdbus-signal-com-example-AlarmService-AlarmInterface.ringAlarm">"ringAlarm"</link> D-Bus signal.
 */
void
alarm_clock_service_alarm_interface_emit_ring_alarm (
    alarmClockServiceAlarmInterface *object)
{
  g_signal_emit_by_name (object, "ring-alarm");
}

/**
 * alarm_clock_service_alarm_interface_call_set_time:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_day: Argument to pass with the method invocation.
 * @arg_month: Argument to pass with the method invocation.
 * @arg_year: Argument to pass with the method invocation.
 * @arg_hour: Argument to pass with the method invocation.
 * @arg_min: Argument to pass with the method invocation.
 * @arg_sec: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setTime">setTime()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_call_set_time_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_call_set_time_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_alarm_interface_call_set_time (
    alarmClockServiceAlarmInterface *proxy,
    guint16 arg_day,
    guchar arg_month,
    guchar arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "setTime",
    g_variant_new ("(qyyyyy)",
                   arg_day,
                   arg_month,
                   arg_year,
                   arg_hour,
                   arg_min,
                   arg_sec),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_alarm_interface_call_set_time_finish:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_call_set_time().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_call_set_time().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_time_finish (
    alarmClockServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_set_time_sync:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_day: Argument to pass with the method invocation.
 * @arg_month: Argument to pass with the method invocation.
 * @arg_year: Argument to pass with the method invocation.
 * @arg_hour: Argument to pass with the method invocation.
 * @arg_min: Argument to pass with the method invocation.
 * @arg_sec: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setTime">setTime()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_call_set_time() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_time_sync (
    alarmClockServiceAlarmInterface *proxy,
    guint16 arg_day,
    guchar arg_month,
    guchar arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "setTime",
    g_variant_new ("(qyyyyy)",
                   arg_day,
                   arg_month,
                   arg_year,
                   arg_hour,
                   arg_min,
                   arg_sec),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_time:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_day: Argument to pass with the method invocation.
 * @arg_month: Argument to pass with the method invocation.
 * @arg_year: Argument to pass with the method invocation.
 * @arg_hour: Argument to pass with the method invocation.
 * @arg_min: Argument to pass with the method invocation.
 * @arg_sec: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmTime">setAlarmTime()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_call_set_alarm_time_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_call_set_alarm_time_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_alarm_interface_call_set_alarm_time (
    alarmClockServiceAlarmInterface *proxy,
    guint16 arg_day,
    guchar arg_month,
    guchar arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "setAlarmTime",
    g_variant_new ("(qyyyyy)",
                   arg_day,
                   arg_month,
                   arg_year,
                   arg_hour,
                   arg_min,
                   arg_sec),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_time_finish:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_call_set_alarm_time().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_call_set_alarm_time().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_alarm_time_finish (
    alarmClockServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_time_sync:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_day: Argument to pass with the method invocation.
 * @arg_month: Argument to pass with the method invocation.
 * @arg_year: Argument to pass with the method invocation.
 * @arg_hour: Argument to pass with the method invocation.
 * @arg_min: Argument to pass with the method invocation.
 * @arg_sec: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmTime">setAlarmTime()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_call_set_alarm_time() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_alarm_time_sync (
    alarmClockServiceAlarmInterface *proxy,
    guint16 arg_day,
    guchar arg_month,
    guchar arg_year,
    guchar arg_hour,
    guchar arg_min,
    guchar arg_sec,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "setAlarmTime",
    g_variant_new ("(qyyyyy)",
                   arg_day,
                   arg_month,
                   arg_year,
                   arg_hour,
                   arg_min,
                   arg_sec),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_status:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_alarm_status: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmStatus">setAlarmStatus()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_call_set_alarm_status_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_call_set_alarm_status_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_alarm_interface_call_set_alarm_status (
    alarmClockServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "setAlarmStatus",
    g_variant_new ("(s)",
                   arg_alarm_status),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_status_finish:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_call_set_alarm_status().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_call_set_alarm_status().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_alarm_status_finish (
    alarmClockServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_set_alarm_status_sync:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @arg_alarm_status: Argument to pass with the method invocation.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmStatus">setAlarmStatus()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_call_set_alarm_status() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_set_alarm_status_sync (
    alarmClockServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "setAlarmStatus",
    g_variant_new ("(s)",
                   arg_alarm_status),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_get_alarm_status:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.getAlarmStatus">getAlarmStatus()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_call_get_alarm_status_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_call_get_alarm_status_sync() for the synchronous, blocking version of this method.
 */
void
alarm_clock_service_alarm_interface_call_get_alarm_status (
    alarmClockServiceAlarmInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "getAlarmStatus",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * alarm_clock_service_alarm_interface_call_get_alarm_status_finish:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @out_alarm_status: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_call_get_alarm_status().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_call_get_alarm_status().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_get_alarm_status_finish (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_alarm_status);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_call_get_alarm_status_sync:
 * @proxy: A #alarmClockServiceAlarmInterfaceProxy.
 * @out_alarm_status: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.getAlarmStatus">getAlarmStatus()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_call_get_alarm_status() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 */
gboolean
alarm_clock_service_alarm_interface_call_get_alarm_status_sync (
    alarmClockServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "getAlarmStatus",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_alarm_status);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * alarm_clock_service_alarm_interface_complete_set_time:
 * @object: A #alarmClockServiceAlarmInterface.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setTime">setTime()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_alarm_interface_complete_set_time (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * alarm_clock_service_alarm_interface_complete_set_alarm_time:
 * @object: A #alarmClockServiceAlarmInterface.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmTime">setAlarmTime()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_alarm_interface_complete_set_alarm_time (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * alarm_clock_service_alarm_interface_complete_set_alarm_status:
 * @object: A #alarmClockServiceAlarmInterface.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.setAlarmStatus">setAlarmStatus()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_alarm_interface_complete_set_alarm_status (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * alarm_clock_service_alarm_interface_complete_get_alarm_status:
 * @object: A #alarmClockServiceAlarmInterface.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @alarm_status: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-com-example-AlarmService-AlarmInterface.getAlarmStatus">getAlarmStatus()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 */
void
alarm_clock_service_alarm_interface_complete_get_alarm_status (
    alarmClockServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *alarm_status)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(s)",
                   alarm_status));
}

/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceAlarmInterfaceProxy:
 *
 * The #alarmClockServiceAlarmInterfaceProxy structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceAlarmInterfaceProxyClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceAlarmInterfaceProxy.
 */

struct _alarmClockServiceAlarmInterfaceProxyPrivate
{
  GData *qdata;
};

static void alarm_clock_service_alarm_interface_proxy_iface_init (alarmClockServiceAlarmInterfaceIface *iface);

#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceAlarmInterfaceProxy, alarm_clock_service_alarm_interface_proxy, G_TYPE_DBUS_PROXY,
                         G_ADD_PRIVATE (alarmClockServiceAlarmInterfaceProxy)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarm_clock_service_alarm_interface_proxy_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceAlarmInterfaceProxy, alarm_clock_service_alarm_interface_proxy, G_TYPE_DBUS_PROXY,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarm_clock_service_alarm_interface_proxy_iface_init));

#endif
static void
alarm_clock_service_alarm_interface_proxy_finalize (GObject *object)
{
  alarmClockServiceAlarmInterfaceProxy *proxy = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_PROXY (object);
  g_datalist_clear (&proxy->priv->qdata);
  G_OBJECT_CLASS (alarm_clock_service_alarm_interface_proxy_parent_class)->finalize (object);
}

static void
alarm_clock_service_alarm_interface_proxy_get_property (GObject      *object,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_alarm_interface_proxy_set_property (GObject      *object,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_alarm_interface_proxy_g_signal (GDBusProxy *proxy,
  const gchar *sender_name G_GNUC_UNUSED,
  const gchar *signal_name,
  GVariant *parameters)
{
  _ExtendedGDBusSignalInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint n;
  guint signal_id;
  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct, signal_name);
  if (info == NULL)
    return;
  num_params = g_variant_n_children (parameters);
  paramv = g_new0 (GValue, num_params + 1);
  g_value_init (&paramv[0], ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE);
  g_value_set_object (&paramv[0], proxy);
  g_variant_iter_init (&iter, parameters);
  n = 1;
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE);
  g_signal_emitv (paramv, signal_id, 0, NULL);
  for (n = 0; n < num_params + 1; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static void
alarm_clock_service_alarm_interface_proxy_g_properties_changed (GDBusProxy *_proxy,
  GVariant *changed_properties,
  const gchar *const *invalidated_properties)
{
  alarmClockServiceAlarmInterfaceProxy *proxy = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_PROXY (_proxy);
  guint n;
  const gchar *key;
  GVariantIter *iter;
  _ExtendedGDBusPropertyInfo *info;
  g_variant_get (changed_properties, "a{sv}", &iter);
  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct, key);
      g_datalist_remove_data (&proxy->priv->qdata, key);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
  g_variant_iter_free (iter);
  for (n = 0; invalidated_properties[n] != NULL; n++)
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct, invalidated_properties[n]);
      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
}

static void
alarm_clock_service_alarm_interface_proxy_init (alarmClockServiceAlarmInterfaceProxy *proxy)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  proxy->priv = alarm_clock_service_alarm_interface_proxy_get_instance_private (proxy);
#else
  proxy->priv = G_TYPE_INSTANCE_GET_PRIVATE (proxy, ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmClockServiceAlarmInterfaceProxyPrivate);
#endif

  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), alarm_clock_service_alarm_interface_interface_info ());
}

static void
alarm_clock_service_alarm_interface_proxy_class_init (alarmClockServiceAlarmInterfaceProxyClass *klass)
{
  GObjectClass *gobject_class;
  GDBusProxyClass *proxy_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize     = alarm_clock_service_alarm_interface_proxy_finalize;
  gobject_class->get_property = alarm_clock_service_alarm_interface_proxy_get_property;
  gobject_class->set_property = alarm_clock_service_alarm_interface_proxy_set_property;

  proxy_class = G_DBUS_PROXY_CLASS (klass);
  proxy_class->g_signal = alarm_clock_service_alarm_interface_proxy_g_signal;
  proxy_class->g_properties_changed = alarm_clock_service_alarm_interface_proxy_g_properties_changed;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceAlarmInterfaceProxyPrivate));
#endif
}

static void
alarm_clock_service_alarm_interface_proxy_iface_init (alarmClockServiceAlarmInterfaceIface *iface)
{
}

/**
 * alarm_clock_service_alarm_interface_proxy_new:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>. See g_dbus_proxy_new() for more details.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_proxy_new_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_proxy_new_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_alarm_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "com.example.AlarmService.AlarmInterface", NULL);
}

/**
 * alarm_clock_service_alarm_interface_proxy_new_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_proxy_new().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_proxy_new().
 *
 * Returns: (transfer full) (type alarmClockServiceAlarmInterfaceProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceAlarmInterface *
alarm_clock_service_alarm_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_alarm_interface_proxy_new_sync:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>. See g_dbus_proxy_new_sync() for more details.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_proxy_new() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceAlarmInterfaceProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceAlarmInterface *
alarm_clock_service_alarm_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "com.example.AlarmService.AlarmInterface", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
  else
    return NULL;
}


/**
 * alarm_clock_service_alarm_interface_proxy_new_for_bus:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Like alarm_clock_service_alarm_interface_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_alarm_interface_proxy_new_for_bus_finish() to get the result of the operation.
 *
 * See alarm_clock_service_alarm_interface_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_alarm_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "com.example.AlarmService.AlarmInterface", NULL);
}

/**
 * alarm_clock_service_alarm_interface_proxy_new_for_bus_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_alarm_interface_proxy_new_for_bus().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_alarm_interface_proxy_new_for_bus().
 *
 * Returns: (transfer full) (type alarmClockServiceAlarmInterfaceProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceAlarmInterface *
alarm_clock_service_alarm_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_alarm_interface_proxy_new_for_bus_sync:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Like alarm_clock_service_alarm_interface_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_alarm_interface_proxy_new_for_bus() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceAlarmInterfaceProxy): The constructed proxy object or %NULL if @error is set.
 */
alarmClockServiceAlarmInterface *
alarm_clock_service_alarm_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "com.example.AlarmService.AlarmInterface", NULL);
  if (ret != NULL)
    return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
  else
    return NULL;
}


/* ------------------------------------------------------------------------ */

/**
 * alarmClockServiceAlarmInterfaceSkeleton:
 *
 * The #alarmClockServiceAlarmInterfaceSkeleton structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceAlarmInterfaceSkeletonClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceAlarmInterfaceSkeleton.
 */

struct _alarmClockServiceAlarmInterfaceSkeletonPrivate
{
  GValue *properties;
  GList *changed_properties;
  GSource *changed_properties_idle_source;
  GMainContext *context;
  GMutex lock;
};

static void
_alarm_clock_service_alarm_interface_skeleton_handle_method_call (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name,
  const gchar *method_name,
  GVariant *parameters,
  GDBusMethodInvocation *invocation,
  gpointer user_data)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (user_data);
  _ExtendedGDBusMethodInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  guint num_params;
  guint num_extra;
  guint n;
  guint signal_id;
  GValue return_value = G_VALUE_INIT;
  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
  g_assert (info != NULL);
  num_params = g_variant_n_children (parameters);
  num_extra = info->pass_fdlist ? 3 : 2;  paramv = g_new0 (GValue, num_params + num_extra);
  n = 0;
  g_value_init (&paramv[n], ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE);
  g_value_set_object (&paramv[n++], skeleton);
  g_value_init (&paramv[n], G_TYPE_DBUS_METHOD_INVOCATION);
  g_value_set_object (&paramv[n++], invocation);
  if (info->pass_fdlist)
    {
#ifdef G_OS_UNIX
      g_value_init (&paramv[n], G_TYPE_UNIX_FD_LIST);
      g_value_set_object (&paramv[n++], g_dbus_message_get_unix_fd_list (g_dbus_method_invocation_get_message (invocation)));
#else
      g_assert_not_reached ();
#endif
    }
  g_variant_iter_init (&iter, parameters);
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - num_extra];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE);
  g_value_init (&return_value, G_TYPE_BOOLEAN);
  g_signal_emitv (paramv, signal_id, 0, &return_value);
  if (!g_value_get_boolean (&return_value))
    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
  g_value_unset (&return_value);
  for (n = 0; n < num_params + num_extra; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static GVariant *
_alarm_clock_service_alarm_interface_skeleton_handle_get_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  GVariant *ret;
  ret = NULL;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      g_value_init (&value, pspec->value_type);
      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
      g_value_unset (&value);
    }
  return ret;
}

static gboolean
_alarm_clock_service_alarm_interface_skeleton_handle_set_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GVariant *variant,
  GError **error,
  gpointer user_data)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  gboolean ret;
  ret = FALSE;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_alarm_clock_service_alarm_interface_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      if (info->use_gvariant)
        g_value_set_variant (&value, variant);
      else
        g_dbus_gvariant_to_gvalue (variant, &value);
      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      g_value_unset (&value);
      ret = TRUE;
    }
  return ret;
}

static const GDBusInterfaceVTable _alarm_clock_service_alarm_interface_skeleton_vtable =
{
  _alarm_clock_service_alarm_interface_skeleton_handle_method_call,
  _alarm_clock_service_alarm_interface_skeleton_handle_get_property,
  _alarm_clock_service_alarm_interface_skeleton_handle_set_property,
  {NULL}
};

static GDBusInterfaceInfo *
alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return alarm_clock_service_alarm_interface_interface_info ();
}

static GDBusInterfaceVTable *
alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return (GDBusInterfaceVTable *) &_alarm_clock_service_alarm_interface_skeleton_vtable;
}

static GVariant *
alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (_skeleton);

  GVariantBuilder builder;
  guint n;
  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
  if (_alarm_clock_service_alarm_interface_interface_info.parent_struct.properties == NULL)
    goto out;
  for (n = 0; _alarm_clock_service_alarm_interface_interface_info.parent_struct.properties[n] != NULL; n++)
    {
      GDBusPropertyInfo *info = _alarm_clock_service_alarm_interface_interface_info.parent_struct.properties[n];
      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
        {
          GVariant *value;
          value = _alarm_clock_service_alarm_interface_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "com.example.AlarmService.AlarmInterface", info->name, NULL, skeleton);
          if (value != NULL)
            {
              g_variant_take_ref (value);
              g_variant_builder_add (&builder, "{sv}", info->name, value);
              g_variant_unref (value);
            }
        }
    }
out:
  return g_variant_builder_end (&builder);
}

static void
alarm_clock_service_alarm_interface_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
{
}

static void
_alarm_clock_service_alarm_interface_on_signal_ring_alarm (
    alarmClockServiceAlarmInterface *object)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (object);

  GList      *connections, *l;
  GVariant   *signal_variant;
  connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));

  signal_variant = g_variant_ref_sink (g_variant_new ("()"));
  for (l = connections; l != NULL; l = l->next)
    {
      GDBusConnection *connection = l->data;
      g_dbus_connection_emit_signal (connection,
        NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "com.example.AlarmService.AlarmInterface", "ringAlarm",
        signal_variant, NULL);
    }
  g_variant_unref (signal_variant);
  g_list_free_full (connections, g_object_unref);
}

static void alarm_clock_service_alarm_interface_skeleton_iface_init (alarmClockServiceAlarmInterfaceIface *iface);
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceAlarmInterfaceSkeleton, alarm_clock_service_alarm_interface_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_ADD_PRIVATE (alarmClockServiceAlarmInterfaceSkeleton)
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarm_clock_service_alarm_interface_skeleton_iface_init));

#else
G_DEFINE_TYPE_WITH_CODE (alarmClockServiceAlarmInterfaceSkeleton, alarm_clock_service_alarm_interface_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, alarm_clock_service_alarm_interface_skeleton_iface_init));

#endif
static void
alarm_clock_service_alarm_interface_skeleton_finalize (GObject *object)
{
  alarmClockServiceAlarmInterfaceSkeleton *skeleton = ALARM_CLOCK_SERVICE_ALARM_INTERFACE_SKELETON (object);
  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
  if (skeleton->priv->changed_properties_idle_source != NULL)
    g_source_destroy (skeleton->priv->changed_properties_idle_source);
  g_main_context_unref (skeleton->priv->context);
  g_mutex_clear (&skeleton->priv->lock);
  G_OBJECT_CLASS (alarm_clock_service_alarm_interface_skeleton_parent_class)->finalize (object);
}

static void
alarm_clock_service_alarm_interface_skeleton_init (alarmClockServiceAlarmInterfaceSkeleton *skeleton)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  skeleton->priv = alarm_clock_service_alarm_interface_skeleton_get_instance_private (skeleton);
#else
  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmClockServiceAlarmInterfaceSkeletonPrivate);
#endif

  g_mutex_init (&skeleton->priv->lock);
  skeleton->priv->context = g_main_context_ref_thread_default ();
}

static void
alarm_clock_service_alarm_interface_skeleton_class_init (alarmClockServiceAlarmInterfaceSkeletonClass *klass)
{
  GObjectClass *gobject_class;
  GDBusInterfaceSkeletonClass *skeleton_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize = alarm_clock_service_alarm_interface_skeleton_finalize;

  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
  skeleton_class->get_info = alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_info;
  skeleton_class->get_properties = alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_properties;
  skeleton_class->flush = alarm_clock_service_alarm_interface_skeleton_dbus_interface_flush;
  skeleton_class->get_vtable = alarm_clock_service_alarm_interface_skeleton_dbus_interface_get_vtable;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (alarmClockServiceAlarmInterfaceSkeletonPrivate));
#endif
}

static void
alarm_clock_service_alarm_interface_skeleton_iface_init (alarmClockServiceAlarmInterfaceIface *iface)
{
  iface->ring_alarm = _alarm_clock_service_alarm_interface_on_signal_ring_alarm;
}

/**
 * alarm_clock_service_alarm_interface_skeleton_new:
 *
 * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>.
 *
 * Returns: (transfer full) (type alarmClockServiceAlarmInterfaceSkeleton): The skeleton object.
 */
alarmClockServiceAlarmInterface *
alarm_clock_service_alarm_interface_skeleton_new (void)
{
  return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (g_object_new (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, NULL));
}

/* ------------------------------------------------------------------------
 * Code for Object, ObjectProxy and ObjectSkeleton
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:alarmClockServiceObject
 * @title: alarmClockServiceObject
 * @short_description: Specialized GDBusObject types
 *
 * This section contains the #alarmClockServiceObject, #alarmClockServiceObjectProxy, and #alarmClockServiceObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.
 */

/**
 * alarmClockServiceObject:
 *
 * The #alarmClockServiceObject type is a specialized container of interfaces.
 */

/**
 * alarmClockServiceObjectIface:
 * @parent_iface: The parent interface.
 *
 * Virtual table for the #alarmClockServiceObject interface.
 */

typedef alarmClockServiceObjectIface alarmClockServiceObjectInterface;
G_DEFINE_INTERFACE_WITH_CODE (alarmClockServiceObject, alarm_clock_service_object, G_TYPE_OBJECT, g_type_interface_add_prerequisite (g_define_type_id, G_TYPE_DBUS_OBJECT));

static void
alarm_clock_service_object_default_init (alarmClockServiceObjectIface *iface)
{
  /**
   * alarmClockServiceObject:org-freedesktop-dbus-introspectable:
   *
   * The #alarmClockServiceOrgFreedesktopDBusIntrospectable instance corresponding to the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link>, if any.
   *
   * Connect to the #GObject::notify signal to get informed of property changes.
   */
  g_object_interface_install_property (iface, g_param_spec_object ("org-freedesktop-dbus-introspectable", "org-freedesktop-dbus-introspectable", "org-freedesktop-dbus-introspectable", ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, G_PARAM_READWRITE|G_PARAM_STATIC_STRINGS));

  /**
   * alarmClockServiceObject:org-freedesktop-dbus-properties:
   *
   * The #alarmClockServiceOrgFreedesktopDBusProperties instance corresponding to the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link>, if any.
   *
   * Connect to the #GObject::notify signal to get informed of property changes.
   */
  g_object_interface_install_property (iface, g_param_spec_object ("org-freedesktop-dbus-properties", "org-freedesktop-dbus-properties", "org-freedesktop-dbus-properties", ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, G_PARAM_READWRITE|G_PARAM_STATIC_STRINGS));

  /**
   * alarmClockServiceObject:alarm-interface:
   *
   * The #alarmClockServiceAlarmInterface instance corresponding to the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link>, if any.
   *
   * Connect to the #GObject::notify signal to get informed of property changes.
   */
  g_object_interface_install_property (iface, g_param_spec_object ("alarm-interface", "alarm-interface", "alarm-interface", ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE, G_PARAM_READWRITE|G_PARAM_STATIC_STRINGS));

}

/**
 * alarm_clock_service_object_get_org_freedesktop_dbus_introspectable:
 * @object: A #alarmClockServiceObject.
 *
 * Gets the #alarmClockServiceOrgFreedesktopDBusIntrospectable instance for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link> on @object, if any.
 *
 * Returns: (transfer full): A #alarmClockServiceOrgFreedesktopDBusIntrospectable that must be freed with g_object_unref() or %NULL if @object does not implement the interface.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_object_get_org_freedesktop_dbus_introspectable (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Introspectable");
  if (ret == NULL)
    return NULL;
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
}

/**
 * alarm_clock_service_object_get_org_freedesktop_dbus_properties:
 * @object: A #alarmClockServiceObject.
 *
 * Gets the #alarmClockServiceOrgFreedesktopDBusProperties instance for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link> on @object, if any.
 *
 * Returns: (transfer full): A #alarmClockServiceOrgFreedesktopDBusProperties that must be freed with g_object_unref() or %NULL if @object does not implement the interface.
 */
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_object_get_org_freedesktop_dbus_properties (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Properties");
  if (ret == NULL)
    return NULL;
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
}

/**
 * alarm_clock_service_object_get_alarm_interface:
 * @object: A #alarmClockServiceObject.
 *
 * Gets the #alarmClockServiceAlarmInterface instance for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link> on @object, if any.
 *
 * Returns: (transfer full): A #alarmClockServiceAlarmInterface that must be freed with g_object_unref() or %NULL if @object does not implement the interface.
 */
alarmClockServiceAlarmInterface *alarm_clock_service_object_get_alarm_interface (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "com.example.AlarmService.AlarmInterface");
  if (ret == NULL)
    return NULL;
  return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
}


/**
 * alarm_clock_service_object_peek_org_freedesktop_dbus_introspectable: (skip)
 * @object: A #alarmClockServiceObject.
 *
 * Like alarm_clock_service_object_get_org_freedesktop_dbus_introspectable() but doesn't increase the reference count on the returned object.
 *
 * <warning>It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</warning>
 *
 * Returns: (transfer none): A #alarmClockServiceOrgFreedesktopDBusIntrospectable or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.
 */
alarmClockServiceOrgFreedesktopDBusIntrospectable *alarm_clock_service_object_peek_org_freedesktop_dbus_introspectable (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Introspectable");
  if (ret == NULL)
    return NULL;
  g_object_unref (ret);
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (ret);
}

/**
 * alarm_clock_service_object_peek_org_freedesktop_dbus_properties: (skip)
 * @object: A #alarmClockServiceObject.
 *
 * Like alarm_clock_service_object_get_org_freedesktop_dbus_properties() but doesn't increase the reference count on the returned object.
 *
 * <warning>It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</warning>
 *
 * Returns: (transfer none): A #alarmClockServiceOrgFreedesktopDBusProperties or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.
 */
alarmClockServiceOrgFreedesktopDBusProperties *alarm_clock_service_object_peek_org_freedesktop_dbus_properties (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Properties");
  if (ret == NULL)
    return NULL;
  g_object_unref (ret);
  return ALARM_CLOCK_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES (ret);
}

/**
 * alarm_clock_service_object_peek_alarm_interface: (skip)
 * @object: A #alarmClockServiceObject.
 *
 * Like alarm_clock_service_object_get_alarm_interface() but doesn't increase the reference count on the returned object.
 *
 * <warning>It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</warning>
 *
 * Returns: (transfer none): A #alarmClockServiceAlarmInterface or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.
 */
alarmClockServiceAlarmInterface *alarm_clock_service_object_peek_alarm_interface (alarmClockServiceObject *object)
{
  GDBusInterface *ret;
  ret = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "com.example.AlarmService.AlarmInterface");
  if (ret == NULL)
    return NULL;
  g_object_unref (ret);
  return ALARM_CLOCK_SERVICE_ALARM_INTERFACE (ret);
}


static void
alarm_clock_service_object_notify (GDBusObject *object, GDBusInterface *interface)
{
  _ExtendedGDBusInterfaceInfo *info = (_ExtendedGDBusInterfaceInfo *) g_dbus_interface_get_info (interface);
  /* info can be NULL if the other end is using a D-Bus interface we don't know
   * anything about, for example old generated code in this process talking to
   * newer generated code in the other process. */
  if (info != NULL)
    g_object_notify (G_OBJECT (object), info->hyphen_name);
}

/**
 * alarmClockServiceObjectProxy:
 *
 * The #alarmClockServiceObjectProxy structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceObjectProxyClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceObjectProxy.
 */

static void
alarm_clock_service_object_proxy__alarm_clock_service_object_iface_init (alarmClockServiceObjectIface *iface G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_object_proxy__g_dbus_object_iface_init (GDBusObjectIface *iface)
{
  iface->interface_added = alarm_clock_service_object_notify;
  iface->interface_removed = alarm_clock_service_object_notify;
}


G_DEFINE_TYPE_WITH_CODE (alarmClockServiceObjectProxy, alarm_clock_service_object_proxy, G_TYPE_DBUS_OBJECT_PROXY,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_OBJECT, alarm_clock_service_object_proxy__alarm_clock_service_object_iface_init)
                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_OBJECT, alarm_clock_service_object_proxy__g_dbus_object_iface_init));

static void
alarm_clock_service_object_proxy_init (alarmClockServiceObjectProxy *object G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_object_proxy_set_property (GObject      *gobject,
  guint         prop_id,
  const GValue *value G_GNUC_UNUSED,
  GParamSpec   *pspec)
{
  G_OBJECT_WARN_INVALID_PROPERTY_ID (gobject, prop_id, pspec);
}

static void
alarm_clock_service_object_proxy_get_property (GObject      *gobject,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec)
{
  alarmClockServiceObjectProxy *object = ALARM_CLOCK_SERVICE_OBJECT_PROXY (gobject);
  GDBusInterface *interface;

  switch (prop_id)
    {
    case 1:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Introspectable");
      g_value_take_object (value, interface);
      break;

    case 2:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Properties");
      g_value_take_object (value, interface);
      break;

    case 3:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "com.example.AlarmService.AlarmInterface");
      g_value_take_object (value, interface);
      break;

    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (gobject, prop_id, pspec);
      break;
  }
}

static void
alarm_clock_service_object_proxy_class_init (alarmClockServiceObjectProxyClass *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

  gobject_class->set_property = alarm_clock_service_object_proxy_set_property;
  gobject_class->get_property = alarm_clock_service_object_proxy_get_property;

  g_object_class_override_property (gobject_class, 1, "org-freedesktop-dbus-introspectable");
  g_object_class_override_property (gobject_class, 2, "org-freedesktop-dbus-properties");
  g_object_class_override_property (gobject_class, 3, "alarm-interface");
}

/**
 * alarm_clock_service_object_proxy_new:
 * @connection: A #GDBusConnection.
 * @object_path: An object path.
 *
 * Creates a new proxy object.
 *
 * Returns: (transfer full): The proxy object.
 */
alarmClockServiceObjectProxy *
alarm_clock_service_object_proxy_new (GDBusConnection *connection,
  const gchar *object_path)
{
  g_return_val_if_fail (G_IS_DBUS_CONNECTION (connection), NULL);
  g_return_val_if_fail (g_variant_is_object_path (object_path), NULL);
  return ALARM_CLOCK_SERVICE_OBJECT_PROXY (g_object_new (ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY, "g-connection", connection, "g-object-path", object_path, NULL));
}

/**
 * alarmClockServiceObjectSkeleton:
 *
 * The #alarmClockServiceObjectSkeleton structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceObjectSkeletonClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceObjectSkeleton.
 */

static void
alarm_clock_service_object_skeleton__alarm_clock_service_object_iface_init (alarmClockServiceObjectIface *iface G_GNUC_UNUSED)
{
}


static void
alarm_clock_service_object_skeleton__g_dbus_object_iface_init (GDBusObjectIface *iface)
{
  iface->interface_added = alarm_clock_service_object_notify;
  iface->interface_removed = alarm_clock_service_object_notify;
}

G_DEFINE_TYPE_WITH_CODE (alarmClockServiceObjectSkeleton, alarm_clock_service_object_skeleton, G_TYPE_DBUS_OBJECT_SKELETON,
                         G_IMPLEMENT_INTERFACE (ALARM_CLOCK_SERVICE_TYPE_OBJECT, alarm_clock_service_object_skeleton__alarm_clock_service_object_iface_init)
                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_OBJECT, alarm_clock_service_object_skeleton__g_dbus_object_iface_init));

static void
alarm_clock_service_object_skeleton_init (alarmClockServiceObjectSkeleton *object G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_object_skeleton_set_property (GObject      *gobject,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec)
{
  alarmClockServiceObjectSkeleton *object = ALARM_CLOCK_SERVICE_OBJECT_SKELETON (gobject);
  GDBusInterfaceSkeleton *interface;

  switch (prop_id)
    {
    case 1:
      interface = g_value_get_object (value);
      if (interface != NULL)
        {
          g_warn_if_fail (ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (interface));
          g_dbus_object_skeleton_add_interface (G_DBUS_OBJECT_SKELETON (object), interface);
        }
      else
        {
          g_dbus_object_skeleton_remove_interface_by_name (G_DBUS_OBJECT_SKELETON (object), "org.freedesktop.DBus.Introspectable");
        }
      break;

    case 2:
      interface = g_value_get_object (value);
      if (interface != NULL)
        {
          g_warn_if_fail (ALARM_CLOCK_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES (interface));
          g_dbus_object_skeleton_add_interface (G_DBUS_OBJECT_SKELETON (object), interface);
        }
      else
        {
          g_dbus_object_skeleton_remove_interface_by_name (G_DBUS_OBJECT_SKELETON (object), "org.freedesktop.DBus.Properties");
        }
      break;

    case 3:
      interface = g_value_get_object (value);
      if (interface != NULL)
        {
          g_warn_if_fail (ALARM_CLOCK_SERVICE_IS_ALARM_INTERFACE (interface));
          g_dbus_object_skeleton_add_interface (G_DBUS_OBJECT_SKELETON (object), interface);
        }
      else
        {
          g_dbus_object_skeleton_remove_interface_by_name (G_DBUS_OBJECT_SKELETON (object), "com.example.AlarmService.AlarmInterface");
        }
      break;

    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (gobject, prop_id, pspec);
      break;
  }
}

static void
alarm_clock_service_object_skeleton_get_property (GObject      *gobject,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec)
{
  alarmClockServiceObjectSkeleton *object = ALARM_CLOCK_SERVICE_OBJECT_SKELETON (gobject);
  GDBusInterface *interface;

  switch (prop_id)
    {
    case 1:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Introspectable");
      g_value_take_object (value, interface);
      break;

    case 2:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "org.freedesktop.DBus.Properties");
      g_value_take_object (value, interface);
      break;

    case 3:
      interface = g_dbus_object_get_interface (G_DBUS_OBJECT (object), "com.example.AlarmService.AlarmInterface");
      g_value_take_object (value, interface);
      break;

    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (gobject, prop_id, pspec);
      break;
  }
}

static void
alarm_clock_service_object_skeleton_class_init (alarmClockServiceObjectSkeletonClass *klass)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

  gobject_class->set_property = alarm_clock_service_object_skeleton_set_property;
  gobject_class->get_property = alarm_clock_service_object_skeleton_get_property;

  g_object_class_override_property (gobject_class, 1, "org-freedesktop-dbus-introspectable");
  g_object_class_override_property (gobject_class, 2, "org-freedesktop-dbus-properties");
  g_object_class_override_property (gobject_class, 3, "alarm-interface");
}

/**
 * alarm_clock_service_object_skeleton_new:
 * @object_path: An object path.
 *
 * Creates a new skeleton object.
 *
 * Returns: (transfer full): The skeleton object.
 */
alarmClockServiceObjectSkeleton *
alarm_clock_service_object_skeleton_new (const gchar *object_path)
{
  g_return_val_if_fail (g_variant_is_object_path (object_path), NULL);
  return ALARM_CLOCK_SERVICE_OBJECT_SKELETON (g_object_new (ALARM_CLOCK_SERVICE_TYPE_OBJECT_SKELETON, "g-object-path", object_path, NULL));
}

/**
 * alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_introspectable:
 * @object: A #alarmClockServiceObjectSkeleton.
 * @interface_: (allow-none): A #alarmClockServiceOrgFreedesktopDBusIntrospectable or %NULL to clear the interface.
 *
 * Sets the #alarmClockServiceOrgFreedesktopDBusIntrospectable instance for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Introspectable.top_of_page">org.freedesktop.DBus.Introspectable</link> on @object.
 */
void alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_introspectable (alarmClockServiceObjectSkeleton *object, alarmClockServiceOrgFreedesktopDBusIntrospectable *interface_)
{
  g_object_set (G_OBJECT (object), "org-freedesktop-dbus-introspectable", interface_, NULL);
}

/**
 * alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_properties:
 * @object: A #alarmClockServiceObjectSkeleton.
 * @interface_: (allow-none): A #alarmClockServiceOrgFreedesktopDBusProperties or %NULL to clear the interface.
 *
 * Sets the #alarmClockServiceOrgFreedesktopDBusProperties instance for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-DBus-Properties.top_of_page">org.freedesktop.DBus.Properties</link> on @object.
 */
void alarm_clock_service_object_skeleton_set_org_freedesktop_dbus_properties (alarmClockServiceObjectSkeleton *object, alarmClockServiceOrgFreedesktopDBusProperties *interface_)
{
  g_object_set (G_OBJECT (object), "org-freedesktop-dbus-properties", interface_, NULL);
}

/**
 * alarm_clock_service_object_skeleton_set_alarm_interface:
 * @object: A #alarmClockServiceObjectSkeleton.
 * @interface_: (allow-none): A #alarmClockServiceAlarmInterface or %NULL to clear the interface.
 *
 * Sets the #alarmClockServiceAlarmInterface instance for the D-Bus interface <link linkend="gdbus-interface-com-example-AlarmService-AlarmInterface.top_of_page">com.example.AlarmService.AlarmInterface</link> on @object.
 */
void alarm_clock_service_object_skeleton_set_alarm_interface (alarmClockServiceObjectSkeleton *object, alarmClockServiceAlarmInterface *interface_)
{
  g_object_set (G_OBJECT (object), "alarm-interface", interface_, NULL);
}


/* ------------------------------------------------------------------------
 * Code for ObjectManager client
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:alarmClockServiceObjectManagerClient
 * @title: alarmClockServiceObjectManagerClient
 * @short_description: Generated GDBusObjectManagerClient type
 *
 * This section contains a #GDBusObjectManagerClient that uses alarm_clock_service_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.
 */

/**
 * alarmClockServiceObjectManagerClient:
 *
 * The #alarmClockServiceObjectManagerClient structure contains only private data and should only be accessed using the provided API.
 */

/**
 * alarmClockServiceObjectManagerClientClass:
 * @parent_class: The parent class.
 *
 * Class structure for #alarmClockServiceObjectManagerClient.
 */

G_DEFINE_TYPE (alarmClockServiceObjectManagerClient, alarm_clock_service_object_manager_client, G_TYPE_DBUS_OBJECT_MANAGER_CLIENT);

static void
alarm_clock_service_object_manager_client_init (alarmClockServiceObjectManagerClient *manager G_GNUC_UNUSED)
{
}

static void
alarm_clock_service_object_manager_client_class_init (alarmClockServiceObjectManagerClientClass *klass G_GNUC_UNUSED)
{
}

/**
 * alarm_clock_service_object_manager_client_get_proxy_type:
 * @manager: A #GDBusObjectManagerClient.
 * @object_path: The object path of the remote object (unused).
 * @interface_name: (allow-none): Interface name of the remote object or %NULL to get the object proxy #GType.
 * @user_data: User data (unused).
 *
 * A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy<!-- -->- and #GDBusProxy<!-- -->-derived types.
 *
 * Returns: A #GDBusProxy<!-- -->-derived #GType if @interface_name is not %NULL, otherwise the #GType for #alarmClockServiceObjectProxy.
 */
GType
alarm_clock_service_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager G_GNUC_UNUSED, const gchar *object_path G_GNUC_UNUSED, const gchar *interface_name, gpointer user_data G_GNUC_UNUSED)
{
  static gsize once_init_value = 0;
  static GHashTable *lookup_hash;
  GType ret;

  if (interface_name == NULL)
    return ALARM_CLOCK_SERVICE_TYPE_OBJECT_PROXY;
  if (g_once_init_enter (&once_init_value))
    {
      lookup_hash = g_hash_table_new (g_str_hash, g_str_equal);
      g_hash_table_insert (lookup_hash, (gpointer) "org.freedesktop.DBus.Introspectable", GSIZE_TO_POINTER (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY));
      g_hash_table_insert (lookup_hash, (gpointer) "org.freedesktop.DBus.Properties", GSIZE_TO_POINTER (ALARM_CLOCK_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY));
      g_hash_table_insert (lookup_hash, (gpointer) "com.example.AlarmService.AlarmInterface", GSIZE_TO_POINTER (ALARM_CLOCK_SERVICE_TYPE_ALARM_INTERFACE_PROXY));
      g_once_init_leave (&once_init_value, 1);
    }
  ret = (GType) GPOINTER_TO_SIZE (g_hash_table_lookup (lookup_hash, interface_name));
  if (ret == (GType) 0)
    ret = G_TYPE_DBUS_PROXY;
  return ret;
}

/**
 * alarm_clock_service_object_manager_client_new:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusObjectManagerClientFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously creates #GDBusObjectManagerClient using alarm_clock_service_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_object_manager_client_new_finish() to get the result of the operation.
 *
 * See alarm_clock_service_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "flags", flags, "name", name, "connection", connection, "object-path", object_path, "get-proxy-type-func", alarm_clock_service_object_manager_client_get_proxy_type, NULL);
}

/**
 * alarm_clock_service_object_manager_client_new_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_object_manager_client_new().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_object_manager_client_new().
 *
 * Returns: (transfer full) (type alarmClockServiceObjectManagerClient): The constructed object manager client or %NULL if @error is set.
 */
GDBusObjectManager *
alarm_clock_service_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return G_DBUS_OBJECT_MANAGER (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_object_manager_client_new_sync:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusObjectManagerClientFlags enumeration.
 * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Synchronously creates #GDBusObjectManagerClient using alarm_clock_service_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_object_manager_client_new() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceObjectManagerClient): The constructed object manager client or %NULL if @error is set.
 */
GDBusObjectManager *
alarm_clock_service_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, cancellable, error, "flags", flags, "name", name, "connection", connection, "object-path", object_path, "get-proxy-type-func", alarm_clock_service_object_manager_client_get_proxy_type, NULL);
  if (ret != NULL)
    return G_DBUS_OBJECT_MANAGER (ret);
  else
    return NULL;
}


/**
 * alarm_clock_service_object_manager_client_new_for_bus:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusObjectManagerClientFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Like alarm_clock_service_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call alarm_clock_service_object_manager_client_new_for_bus_finish() to get the result of the operation.
 *
 * See alarm_clock_service_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.
 */
void
alarm_clock_service_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data)
{
  g_async_initable_new_async (ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "flags", flags, "name", name, "bus-type", bus_type, "object-path", object_path, "get-proxy-type-func", alarm_clock_service_object_manager_client_get_proxy_type, NULL);
}

/**
 * alarm_clock_service_object_manager_client_new_for_bus_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to alarm_clock_service_object_manager_client_new_for_bus().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with alarm_clock_service_object_manager_client_new_for_bus().
 *
 * Returns: (transfer full) (type alarmClockServiceObjectManagerClient): The constructed object manager client or %NULL if @error is set.
 */
GDBusObjectManager *
alarm_clock_service_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return G_DBUS_OBJECT_MANAGER (ret);
  else
    return NULL;
}

/**
 * alarm_clock_service_object_manager_client_new_for_bus_sync:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusObjectManagerClientFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (allow-none): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Like alarm_clock_service_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See alarm_clock_service_object_manager_client_new_for_bus() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type alarmClockServiceObjectManagerClient): The constructed object manager client or %NULL if @error is set.
 */
GDBusObjectManager *
alarm_clock_service_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error)
{
  GInitable *ret;
  ret = g_initable_new (ALARM_CLOCK_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, cancellable, error, "flags", flags, "name", name, "bus-type", bus_type, "object-path", object_path, "get-proxy-type-func", alarm_clock_service_object_manager_client_get_proxy_type, NULL);
  if (ret != NULL)
    return G_DBUS_OBJECT_MANAGER (ret);
  else
    return NULL;
}


