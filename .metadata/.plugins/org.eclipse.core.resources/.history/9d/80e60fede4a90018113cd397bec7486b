/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ALARMCLOCKSTUBS_H__
#define __ALARMCLOCKSTUBS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (alarm_service_org_freedesktop_dbus_introspectable_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarmServiceOrgFreedesktopDBusIntrospectable))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, alarmServiceOrgFreedesktopDBusIntrospectableIface))

struct _alarmServiceOrgFreedesktopDBusIntrospectable;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectable alarmServiceOrgFreedesktopDBusIntrospectable;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableIface alarmServiceOrgFreedesktopDBusIntrospectableIface;

struct _alarmServiceOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    alarmServiceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType alarm_service_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_service_org_freedesktop_dbus_introspectable_interface_info (void);
guint alarm_service_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_service_org_freedesktop_dbus_introspectable_complete_introspect (
    alarmServiceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);



/* D-Bus method calls: */
void alarm_service_org_freedesktop_dbus_introspectable_call_introspect (
    alarmServiceOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_org_freedesktop_dbus_introspectable_call_introspect_finish (
    alarmServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_org_freedesktop_dbus_introspectable_call_introspect_sync (
    alarmServiceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (alarm_service_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmServiceOrgFreedesktopDBusIntrospectableProxy))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmServiceOrgFreedesktopDBusIntrospectableProxyClass))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, alarmServiceOrgFreedesktopDBusIntrospectableProxyClass))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableProxy alarmServiceOrgFreedesktopDBusIntrospectableProxy;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableProxyClass alarmServiceOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableProxyPrivate alarmServiceOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _alarmServiceOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmServiceOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _alarmServiceOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_service_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void alarm_service_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (alarm_service_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmServiceOrgFreedesktopDBusIntrospectableSkeleton))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmServiceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, alarmServiceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableSkeleton alarmServiceOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableSkeletonClass alarmServiceOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _alarmServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate alarmServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _alarmServiceOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmServiceOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _alarmServiceOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_service_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (alarm_service_org_freedesktop_dbus_properties_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarmServiceOrgFreedesktopDBusProperties))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, alarmServiceOrgFreedesktopDBusPropertiesIface))

struct _alarmServiceOrgFreedesktopDBusProperties;
typedef struct _alarmServiceOrgFreedesktopDBusProperties alarmServiceOrgFreedesktopDBusProperties;
typedef struct _alarmServiceOrgFreedesktopDBusPropertiesIface alarmServiceOrgFreedesktopDBusPropertiesIface;

struct _alarmServiceOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    alarmServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_property);

  gboolean (*handle_get_all) (
    alarmServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

};

GType alarm_service_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_service_org_freedesktop_dbus_properties_interface_info (void);
guint alarm_service_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_service_org_freedesktop_dbus_properties_complete_get (
    alarmServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void alarm_service_org_freedesktop_dbus_properties_complete_get_all (
    alarmServiceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus method calls: */
void alarm_service_org_freedesktop_dbus_properties_call_get (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_org_freedesktop_dbus_properties_call_get_finish (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_org_freedesktop_dbus_properties_call_get_sync (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_property,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void alarm_service_org_freedesktop_dbus_properties_call_get_all (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_org_freedesktop_dbus_properties_call_get_all_finish (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_org_freedesktop_dbus_properties_call_get_all_sync (
    alarmServiceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (alarm_service_org_freedesktop_dbus_properties_proxy_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmServiceOrgFreedesktopDBusPropertiesProxy))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmServiceOrgFreedesktopDBusPropertiesProxyClass))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, alarmServiceOrgFreedesktopDBusPropertiesProxyClass))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _alarmServiceOrgFreedesktopDBusPropertiesProxy alarmServiceOrgFreedesktopDBusPropertiesProxy;
typedef struct _alarmServiceOrgFreedesktopDBusPropertiesProxyClass alarmServiceOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _alarmServiceOrgFreedesktopDBusPropertiesProxyPrivate alarmServiceOrgFreedesktopDBusPropertiesProxyPrivate;

struct _alarmServiceOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmServiceOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _alarmServiceOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_service_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void alarm_service_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_service_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (alarm_service_org_freedesktop_dbus_properties_skeleton_get_type ())
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmServiceOrgFreedesktopDBusPropertiesSkeleton))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmServiceOrgFreedesktopDBusPropertiesSkeletonClass))
#define ALARM_SERVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, alarmServiceOrgFreedesktopDBusPropertiesSkeletonClass))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define ALARM_SERVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _alarmServiceOrgFreedesktopDBusPropertiesSkeleton alarmServiceOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _alarmServiceOrgFreedesktopDBusPropertiesSkeletonClass alarmServiceOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _alarmServiceOrgFreedesktopDBusPropertiesSkeletonPrivate alarmServiceOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _alarmServiceOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmServiceOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _alarmServiceOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_service_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

alarmServiceOrgFreedesktopDBusProperties *alarm_service_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.example.AlarmService.AlarmInterface */

#define ALARM_SERVICE_TYPE_ALARM_INTERFACE (alarm_service_alarm_interface_get_type ())
#define ALARM_SERVICE_ALARM_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE, alarmServiceAlarmInterface))
#define ALARM_SERVICE_IS_ALARM_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE))
#define ALARM_SERVICE_ALARM_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE, alarmServiceAlarmInterfaceIface))

struct _alarmServiceAlarmInterface;
typedef struct _alarmServiceAlarmInterface alarmServiceAlarmInterface;
typedef struct _alarmServiceAlarmInterfaceIface alarmServiceAlarmInterfaceIface;

struct _alarmServiceAlarmInterfaceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_alarm_status) (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_alarm_status) (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_alarm_status);

  gboolean (*handle_set_alarm_time) (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_time);

  gboolean (*handle_set_time) (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_time);

  void (*ring_alarm) (
    alarmServiceAlarmInterface *object);

};

GType alarm_service_alarm_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *alarm_service_alarm_interface_interface_info (void);
guint alarm_service_alarm_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void alarm_service_alarm_interface_complete_set_time (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation);

void alarm_service_alarm_interface_complete_set_alarm_time (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation);

void alarm_service_alarm_interface_complete_set_alarm_status (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation);

void alarm_service_alarm_interface_complete_get_alarm_status (
    alarmServiceAlarmInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *alarm_status);



/* D-Bus signal emissions functions: */
void alarm_service_alarm_interface_emit_ring_alarm (
    alarmServiceAlarmInterface *object);



/* D-Bus method calls: */
void alarm_service_alarm_interface_call_set_time (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_time,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_alarm_interface_call_set_time_finish (
    alarmServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_alarm_interface_call_set_time_sync (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_time,
    GCancellable *cancellable,
    GError **error);

void alarm_service_alarm_interface_call_set_alarm_time (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_time,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_alarm_interface_call_set_alarm_time_finish (
    alarmServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_alarm_interface_call_set_alarm_time_sync (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_time,
    GCancellable *cancellable,
    GError **error);

void alarm_service_alarm_interface_call_set_alarm_status (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_alarm_interface_call_set_alarm_status_finish (
    alarmServiceAlarmInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_alarm_interface_call_set_alarm_status_sync (
    alarmServiceAlarmInterface *proxy,
    const gchar *arg_alarm_status,
    GCancellable *cancellable,
    GError **error);

void alarm_service_alarm_interface_call_get_alarm_status (
    alarmServiceAlarmInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean alarm_service_alarm_interface_call_get_alarm_status_finish (
    alarmServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GAsyncResult *res,
    GError **error);

gboolean alarm_service_alarm_interface_call_get_alarm_status_sync (
    alarmServiceAlarmInterface *proxy,
    gchar **out_alarm_status,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY (alarm_service_alarm_interface_proxy_get_type ())
#define ALARM_SERVICE_ALARM_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmServiceAlarmInterfaceProxy))
#define ALARM_SERVICE_ALARM_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmServiceAlarmInterfaceProxyClass))
#define ALARM_SERVICE_ALARM_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY, alarmServiceAlarmInterfaceProxyClass))
#define ALARM_SERVICE_IS_ALARM_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY))
#define ALARM_SERVICE_IS_ALARM_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ALARM_INTERFACE_PROXY))

typedef struct _alarmServiceAlarmInterfaceProxy alarmServiceAlarmInterfaceProxy;
typedef struct _alarmServiceAlarmInterfaceProxyClass alarmServiceAlarmInterfaceProxyClass;
typedef struct _alarmServiceAlarmInterfaceProxyPrivate alarmServiceAlarmInterfaceProxyPrivate;

struct _alarmServiceAlarmInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  alarmServiceAlarmInterfaceProxyPrivate *priv;
};

struct _alarmServiceAlarmInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType alarm_service_alarm_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceAlarmInterfaceProxy, g_object_unref)
#endif

void alarm_service_alarm_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceAlarmInterface *alarm_service_alarm_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceAlarmInterface *alarm_service_alarm_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void alarm_service_alarm_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
alarmServiceAlarmInterface *alarm_service_alarm_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
alarmServiceAlarmInterface *alarm_service_alarm_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON (alarm_service_alarm_interface_skeleton_get_type ())
#define ALARM_SERVICE_ALARM_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmServiceAlarmInterfaceSkeleton))
#define ALARM_SERVICE_ALARM_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmServiceAlarmInterfaceSkeletonClass))
#define ALARM_SERVICE_ALARM_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON, alarmServiceAlarmInterfaceSkeletonClass))
#define ALARM_SERVICE_IS_ALARM_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON))
#define ALARM_SERVICE_IS_ALARM_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_ALARM_INTERFACE_SKELETON))

typedef struct _alarmServiceAlarmInterfaceSkeleton alarmServiceAlarmInterfaceSkeleton;
typedef struct _alarmServiceAlarmInterfaceSkeletonClass alarmServiceAlarmInterfaceSkeletonClass;
typedef struct _alarmServiceAlarmInterfaceSkeletonPrivate alarmServiceAlarmInterfaceSkeletonPrivate;

struct _alarmServiceAlarmInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  alarmServiceAlarmInterfaceSkeletonPrivate *priv;
};

struct _alarmServiceAlarmInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType alarm_service_alarm_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceAlarmInterfaceSkeleton, g_object_unref)
#endif

alarmServiceAlarmInterface *alarm_service_alarm_interface_skeleton_new (void);


/* ---- */

#define ALARM_SERVICE_TYPE_OBJECT (alarm_service_object_get_type ())
#define ALARM_SERVICE_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_OBJECT, alarmServiceObject))
#define ALARM_SERVICE_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_OBJECT))
#define ALARM_SERVICE_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ALARM_SERVICE_TYPE_OBJECT, alarmServiceObject))

struct _alarmServiceObject;
typedef struct _alarmServiceObject alarmServiceObject;
typedef struct _alarmServiceObjectIface alarmServiceObjectIface;

struct _alarmServiceObjectIface
{
  GTypeInterface parent_iface;
};

GType alarm_service_object_get_type (void) G_GNUC_CONST;

alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_object_get_org_freedesktop_dbus_introspectable (alarmServiceObject *object);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_object_get_org_freedesktop_dbus_properties (alarmServiceObject *object);
alarmServiceAlarmInterface *alarm_service_object_get_alarm_interface (alarmServiceObject *object);
alarmServiceOrgFreedesktopDBusIntrospectable *alarm_service_object_peek_org_freedesktop_dbus_introspectable (alarmServiceObject *object);
alarmServiceOrgFreedesktopDBusProperties *alarm_service_object_peek_org_freedesktop_dbus_properties (alarmServiceObject *object);
alarmServiceAlarmInterface *alarm_service_object_peek_alarm_interface (alarmServiceObject *object);

#define ALARM_SERVICE_TYPE_OBJECT_PROXY (alarm_service_object_proxy_get_type ())
#define ALARM_SERVICE_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_OBJECT_PROXY, alarmServiceObjectProxy))
#define ALARM_SERVICE_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_OBJECT_PROXY, alarmServiceObjectProxyClass))
#define ALARM_SERVICE_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_OBJECT_PROXY, alarmServiceObjectProxyClass))
#define ALARM_SERVICE_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_OBJECT_PROXY))
#define ALARM_SERVICE_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_OBJECT_PROXY))

typedef struct _alarmServiceObjectProxy alarmServiceObjectProxy;
typedef struct _alarmServiceObjectProxyClass alarmServiceObjectProxyClass;
typedef struct _alarmServiceObjectProxyPrivate alarmServiceObjectProxyPrivate;

struct _alarmServiceObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  alarmServiceObjectProxyPrivate *priv;
};

struct _alarmServiceObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType alarm_service_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceObjectProxy, g_object_unref)
#endif

alarmServiceObjectProxy *alarm_service_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define ALARM_SERVICE_TYPE_OBJECT_SKELETON (alarm_service_object_skeleton_get_type ())
#define ALARM_SERVICE_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_OBJECT_SKELETON, alarmServiceObjectSkeleton))
#define ALARM_SERVICE_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_OBJECT_SKELETON, alarmServiceObjectSkeletonClass))
#define ALARM_SERVICE_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_OBJECT_SKELETON, alarmServiceObjectSkeletonClass))
#define ALARM_SERVICE_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_OBJECT_SKELETON))
#define ALARM_SERVICE_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_OBJECT_SKELETON))

typedef struct _alarmServiceObjectSkeleton alarmServiceObjectSkeleton;
typedef struct _alarmServiceObjectSkeletonClass alarmServiceObjectSkeletonClass;
typedef struct _alarmServiceObjectSkeletonPrivate alarmServiceObjectSkeletonPrivate;

struct _alarmServiceObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  alarmServiceObjectSkeletonPrivate *priv;
};

struct _alarmServiceObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType alarm_service_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceObjectSkeleton, g_object_unref)
#endif

alarmServiceObjectSkeleton *alarm_service_object_skeleton_new (const gchar *object_path);
void alarm_service_object_skeleton_set_org_freedesktop_dbus_introspectable (alarmServiceObjectSkeleton *object, alarmServiceOrgFreedesktopDBusIntrospectable *interface_);
void alarm_service_object_skeleton_set_org_freedesktop_dbus_properties (alarmServiceObjectSkeleton *object, alarmServiceOrgFreedesktopDBusProperties *interface_);
void alarm_service_object_skeleton_set_alarm_interface (alarmServiceObjectSkeleton *object, alarmServiceAlarmInterface *interface_);

/* ---- */

#define ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT (alarm_service_object_manager_client_get_type ())
#define ALARM_SERVICE_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmServiceObjectManagerClient))
#define ALARM_SERVICE_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmServiceObjectManagerClientClass))
#define ALARM_SERVICE_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT, alarmServiceObjectManagerClientClass))
#define ALARM_SERVICE_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT))
#define ALARM_SERVICE_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ALARM_SERVICE_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _alarmServiceObjectManagerClient alarmServiceObjectManagerClient;
typedef struct _alarmServiceObjectManagerClientClass alarmServiceObjectManagerClientClass;
typedef struct _alarmServiceObjectManagerClientPrivate alarmServiceObjectManagerClientPrivate;

struct _alarmServiceObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  alarmServiceObjectManagerClientPrivate *priv;
};

struct _alarmServiceObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (alarmServiceObjectManagerClient, g_object_unref)
#endif

GType alarm_service_object_manager_client_get_type (void) G_GNUC_CONST;

GType alarm_service_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void alarm_service_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_service_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_service_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void alarm_service_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *alarm_service_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *alarm_service_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __ALARMCLOCKSTUBS_H__ */
